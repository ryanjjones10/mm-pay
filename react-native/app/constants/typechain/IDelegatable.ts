/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export type TransactionStruct = {
  to: string
  gasLimit: BigNumberish
  value: BigNumberish
  data: BytesLike
}

export type TransactionStructOutput = [string, BigNumber, BigNumber, string] & {
  to: string
  gasLimit: BigNumber
  value: BigNumber
  data: string
}

export type CaveatStruct = { enforcer: string; terms: BytesLike }

export type CaveatStructOutput = [string, string] & {
  enforcer: string
  terms: string
}

export type DelegationStruct = {
  delegate: string
  authority: BytesLike
  caveats: CaveatStruct[]
  salt: BigNumberish
}

export type DelegationStructOutput = [
  string,
  string,
  CaveatStructOutput[],
  BigNumber,
] & {
  delegate: string
  authority: string
  caveats: CaveatStructOutput[]
  salt: BigNumber
}

export type SignedDelegationStruct = {
  message: DelegationStruct
  signature: BytesLike
  signer: string
}

export type SignedDelegationStructOutput = [
  DelegationStructOutput,
  string,
  string,
] & { message: DelegationStructOutput; signature: string; signer: string }

export type InvocationStruct = {
  transaction: TransactionStruct
  authority: SignedDelegationStruct[]
}

export type InvocationStructOutput = [
  TransactionStructOutput,
  SignedDelegationStructOutput[],
] & {
  transaction: TransactionStructOutput
  authority: SignedDelegationStructOutput[]
}

export type ReplayProtectionStruct = {
  nonce: BigNumberish
  queue: BigNumberish
}

export type ReplayProtectionStructOutput = [BigNumber, BigNumber] & {
  nonce: BigNumber
  queue: BigNumber
}

export type BatchStruct = {
  invocations: InvocationStruct[]
  replayProtection: ReplayProtectionStruct
}

export type BatchStructOutput = [
  InvocationStructOutput[],
  ReplayProtectionStructOutput,
] & {
  invocations: InvocationStructOutput[]
  replayProtection: ReplayProtectionStructOutput
}

export type SignedBatchStruct = {
  message: BatchStruct
  signature: BytesLike
  signer: string
}

export type SignedBatchStructOutput = [BatchStructOutput, string, string] & {
  message: BatchStructOutput
  signature: string
  signer: string
}

export interface IDelegatableInterface extends utils.Interface {
  contractName: 'IDelegatable'
  functions: {
    'contractInvoke(((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[])[])': FunctionFragment
    'invoke(((((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[])[],(uint256,uint256)),bytes,address))': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'contractInvoke',
    values: [InvocationStruct[]],
  ): string
  encodeFunctionData(
    functionFragment: 'invoke',
    values: [SignedBatchStruct],
  ): string

  decodeFunctionResult(
    functionFragment: 'contractInvoke',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'invoke', data: BytesLike): Result

  events: {}
}

export interface IDelegatable extends BaseContract {
  contractName: 'IDelegatable'
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IDelegatableInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    contractInvoke(
      batch: InvocationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    invoke(
      signedBatch: SignedBatchStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  contractInvoke(
    batch: InvocationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  invoke(
    signedBatch: SignedBatchStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    contractInvoke(
      batch: InvocationStruct[],
      overrides?: CallOverrides,
    ): Promise<boolean>

    invoke(
      signedBatch: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<boolean>
  }

  filters: {}

  estimateGas: {
    contractInvoke(
      batch: InvocationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    invoke(
      signedBatch: SignedBatchStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    contractInvoke(
      batch: InvocationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    invoke(
      signedBatch: SignedBatchStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
