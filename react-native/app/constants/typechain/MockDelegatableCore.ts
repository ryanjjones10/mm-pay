/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export type ReplayProtectionStruct = {
  nonce: BigNumberish
  queue: BigNumberish
}

export type ReplayProtectionStructOutput = [BigNumber, BigNumber] & {
  nonce: BigNumber
  queue: BigNumber
}

export type TransactionStruct = {
  to: string
  gasLimit: BigNumberish
  value: BigNumberish
  data: BytesLike
}

export type TransactionStructOutput = [string, BigNumber, BigNumber, string] & {
  to: string
  gasLimit: BigNumber
  value: BigNumber
  data: string
}

export type CaveatStruct = { enforcer: string; terms: BytesLike }

export type CaveatStructOutput = [string, string] & {
  enforcer: string
  terms: string
}

export type DelegationStruct = {
  delegate: string
  authority: BytesLike
  caveats: CaveatStruct[]
  salt: BigNumberish
}

export type DelegationStructOutput = [
  string,
  string,
  CaveatStructOutput[],
  BigNumber,
] & {
  delegate: string
  authority: string
  caveats: CaveatStructOutput[]
  salt: BigNumber
}

export type SignedDelegationStruct = {
  message: DelegationStruct
  signature: BytesLike
  signer: string
}

export type SignedDelegationStructOutput = [
  DelegationStructOutput,
  string,
  string,
] & { message: DelegationStructOutput; signature: string; signer: string }

export type InvocationStruct = {
  transaction: TransactionStruct
  authority: SignedDelegationStruct[]
}

export type InvocationStructOutput = [
  TransactionStructOutput,
  SignedDelegationStructOutput[],
] & {
  transaction: TransactionStructOutput
  authority: SignedDelegationStructOutput[]
}

export type BatchStruct = {
  invocations: InvocationStruct[]
  replayProtection: ReplayProtectionStruct
}

export type BatchStructOutput = [
  InvocationStructOutput[],
  ReplayProtectionStructOutput,
] & {
  invocations: InvocationStructOutput[]
  replayProtection: ReplayProtectionStructOutput
}

export type EIP712DomainStruct = {
  name: string
  version: string
  chainId: BigNumberish
  verifyingContract: string
}

export type EIP712DomainStructOutput = [string, string, BigNumber, string] & {
  name: string
  version: string
  chainId: BigNumber
  verifyingContract: string
}

export type MultisigParamsStruct = {
  signers: string[]
  threshold: BigNumberish
}

export type MultisigParamsStructOutput = [string[], BigNumber] & {
  signers: string[]
  threshold: BigNumber
}

export type SignedBatchStruct = {
  message: BatchStruct
  signature: BytesLike
  signer: string
}

export type SignedBatchStructOutput = [BatchStructOutput, string, string] & {
  message: BatchStructOutput
  signature: string
  signer: string
}

export type SignedMultisigParamsStruct = {
  message: MultisigParamsStruct
  signature: BytesLike
  signer: string
}

export type SignedMultisigParamsStructOutput = [
  MultisigParamsStructOutput,
  string,
  string,
] & { message: MultisigParamsStructOutput; signature: string; signer: string }

export interface MockDelegatableCoreInterface extends utils.Interface {
  contractName: 'MockDelegatableCore'
  functions: {
    'domainHash()': FunctionFragment
    'enforceReplayProtection(address,(uint256,uint256))': FunctionFragment
    'exec()': FunctionFragment
    'execFrom(address)': FunctionFragment
    'getAddressArrayPacketHash(address[])': FunctionFragment
    'getBatchPacketHash((((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[])[],(uint256,uint256)))': FunctionFragment
    'getCaveatArrayPacketHash((address,bytes)[])': FunctionFragment
    'getCaveatPacketHash((address,bytes))': FunctionFragment
    'getDelegationPacketHash((address,bytes32,(address,bytes)[],uint256))': FunctionFragment
    'getDomainHash()': FunctionFragment
    'getEIP712DomainHash(string,string,uint256,address)': FunctionFragment
    'getEip712DomainPacketHash((string,string,uint256,address))': FunctionFragment
    'getInvocationArrayPacketHash(((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[])[])': FunctionFragment
    'getInvocationPacketHash(((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[]))': FunctionFragment
    'getMultisigparamsPacketHash((address[],uint256))': FunctionFragment
    'getNonce(address,uint256)': FunctionFragment
    'getReplayprotectionPacketHash((uint256,uint256))': FunctionFragment
    'getSignedbatchPacketHash(((((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[])[],(uint256,uint256)),bytes,address))': FunctionFragment
    'getSigneddelegationArrayPacketHash(((address,bytes32,(address,bytes)[],uint256),bytes,address)[])': FunctionFragment
    'getSigneddelegationPacketHash(((address,bytes32,(address,bytes)[],uint256),bytes,address))': FunctionFragment
    'getSignedmultisigparamsPacketHash(((address[],uint256),bytes,address))': FunctionFragment
    'getTransactionPacketHash((address,uint256,uint256,bytes))': FunctionFragment
    'invoke(((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[])[],address)': FunctionFragment
    'specialSender()': FunctionFragment
    'verifySignedBatch(((((address,uint256,uint256,bytes),((address,bytes32,(address,bytes)[],uint256),bytes,address)[])[],(uint256,uint256)),bytes,address))': FunctionFragment
    'verifySignedDelegation(((address,bytes32,(address,bytes)[],uint256),bytes,address))': FunctionFragment
    'verifySignedMultisigParams(((address[],uint256),bytes,address))': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'domainHash', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'enforceReplayProtection',
    values: [string, ReplayProtectionStruct],
  ): string
  encodeFunctionData(functionFragment: 'exec', values?: undefined): string
  encodeFunctionData(functionFragment: 'execFrom', values: [string]): string
  encodeFunctionData(
    functionFragment: 'getAddressArrayPacketHash',
    values: [string[]],
  ): string
  encodeFunctionData(
    functionFragment: 'getBatchPacketHash',
    values: [BatchStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getCaveatArrayPacketHash',
    values: [CaveatStruct[]],
  ): string
  encodeFunctionData(
    functionFragment: 'getCaveatPacketHash',
    values: [CaveatStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getDelegationPacketHash',
    values: [DelegationStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getDomainHash',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getEIP712DomainHash',
    values: [string, string, BigNumberish, string],
  ): string
  encodeFunctionData(
    functionFragment: 'getEip712DomainPacketHash',
    values: [EIP712DomainStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getInvocationArrayPacketHash',
    values: [InvocationStruct[]],
  ): string
  encodeFunctionData(
    functionFragment: 'getInvocationPacketHash',
    values: [InvocationStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getMultisigparamsPacketHash',
    values: [MultisigParamsStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getNonce',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getReplayprotectionPacketHash',
    values: [ReplayProtectionStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getSignedbatchPacketHash',
    values: [SignedBatchStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getSigneddelegationArrayPacketHash',
    values: [SignedDelegationStruct[]],
  ): string
  encodeFunctionData(
    functionFragment: 'getSigneddelegationPacketHash',
    values: [SignedDelegationStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getSignedmultisigparamsPacketHash',
    values: [SignedMultisigParamsStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'getTransactionPacketHash',
    values: [TransactionStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'invoke',
    values: [InvocationStruct[], string],
  ): string
  encodeFunctionData(
    functionFragment: 'specialSender',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'verifySignedBatch',
    values: [SignedBatchStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'verifySignedDelegation',
    values: [SignedDelegationStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'verifySignedMultisigParams',
    values: [SignedMultisigParamsStruct],
  ): string

  decodeFunctionResult(functionFragment: 'domainHash', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'enforceReplayProtection',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'exec', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execFrom', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAddressArrayPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBatchPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCaveatArrayPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCaveatPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDelegationPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDomainHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEIP712DomainHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEip712DomainPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInvocationArrayPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInvocationPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMultisigparamsPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getNonce', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getReplayprotectionPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSignedbatchPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSigneddelegationArrayPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSigneddelegationPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSignedmultisigparamsPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTransactionPacketHash',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'invoke', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'specialSender',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'verifySignedBatch',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'verifySignedDelegation',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'verifySignedMultisigParams',
    data: BytesLike,
  ): Result

  events: {}
}

export interface MockDelegatableCore extends BaseContract {
  contractName: 'MockDelegatableCore'
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: MockDelegatableCoreInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    domainHash(overrides?: CallOverrides): Promise<[string]>

    enforceReplayProtection(
      intendedSender: string,
      protection: ReplayProtectionStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    exec(overrides?: CallOverrides): Promise<[string]>

    execFrom(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    getAddressArrayPacketHash(
      _input: string[],
      overrides?: CallOverrides,
    ): Promise<[string]>

    getBatchPacketHash(
      _input: BatchStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getCaveatArrayPacketHash(
      _input: CaveatStruct[],
      overrides?: CallOverrides,
    ): Promise<[string]>

    getCaveatPacketHash(
      _input: CaveatStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getDelegationPacketHash(
      _input: DelegationStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getDomainHash(overrides?: CallOverrides): Promise<[string]>

    getEIP712DomainHash(
      contractName: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getEip712DomainPacketHash(
      _input: EIP712DomainStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getInvocationArrayPacketHash(
      _input: InvocationStruct[],
      overrides?: CallOverrides,
    ): Promise<[string]>

    getInvocationPacketHash(
      _input: InvocationStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getMultisigparamsPacketHash(
      _input: MultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getNonce(
      intendedSender: string,
      queue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getReplayprotectionPacketHash(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getSignedbatchPacketHash(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getSigneddelegationArrayPacketHash(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides,
    ): Promise<[string]>

    getSigneddelegationPacketHash(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getSignedmultisigparamsPacketHash(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getTransactionPacketHash(
      _input: TransactionStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    invoke(
      batch: InvocationStruct[],
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    specialSender(overrides?: CallOverrides): Promise<[string]>

    verifySignedBatch(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    verifySignedDelegation(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>

    verifySignedMultisigParams(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>
  }

  domainHash(overrides?: CallOverrides): Promise<string>

  enforceReplayProtection(
    intendedSender: string,
    protection: ReplayProtectionStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  exec(overrides?: CallOverrides): Promise<string>

  execFrom(
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  getAddressArrayPacketHash(
    _input: string[],
    overrides?: CallOverrides,
  ): Promise<string>

  getBatchPacketHash(
    _input: BatchStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getCaveatArrayPacketHash(
    _input: CaveatStruct[],
    overrides?: CallOverrides,
  ): Promise<string>

  getCaveatPacketHash(
    _input: CaveatStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getDelegationPacketHash(
    _input: DelegationStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getDomainHash(overrides?: CallOverrides): Promise<string>

  getEIP712DomainHash(
    contractName: string,
    version: string,
    chainId: BigNumberish,
    verifyingContract: string,
    overrides?: CallOverrides,
  ): Promise<string>

  getEip712DomainPacketHash(
    _input: EIP712DomainStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getInvocationArrayPacketHash(
    _input: InvocationStruct[],
    overrides?: CallOverrides,
  ): Promise<string>

  getInvocationPacketHash(
    _input: InvocationStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getMultisigparamsPacketHash(
    _input: MultisigParamsStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getNonce(
    intendedSender: string,
    queue: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getReplayprotectionPacketHash(
    _input: ReplayProtectionStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getSignedbatchPacketHash(
    _input: SignedBatchStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getSigneddelegationArrayPacketHash(
    _input: SignedDelegationStruct[],
    overrides?: CallOverrides,
  ): Promise<string>

  getSigneddelegationPacketHash(
    _input: SignedDelegationStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getSignedmultisigparamsPacketHash(
    _input: SignedMultisigParamsStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  getTransactionPacketHash(
    _input: TransactionStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  invoke(
    batch: InvocationStruct[],
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  specialSender(overrides?: CallOverrides): Promise<string>

  verifySignedBatch(
    _input: SignedBatchStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  verifySignedDelegation(
    _input: SignedDelegationStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  verifySignedMultisigParams(
    _input: SignedMultisigParamsStruct,
    overrides?: CallOverrides,
  ): Promise<string>

  callStatic: {
    domainHash(overrides?: CallOverrides): Promise<string>

    enforceReplayProtection(
      intendedSender: string,
      protection: ReplayProtectionStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    exec(overrides?: CallOverrides): Promise<string>

    execFrom(sender: string, overrides?: CallOverrides): Promise<string>

    getAddressArrayPacketHash(
      _input: string[],
      overrides?: CallOverrides,
    ): Promise<string>

    getBatchPacketHash(
      _input: BatchStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getCaveatArrayPacketHash(
      _input: CaveatStruct[],
      overrides?: CallOverrides,
    ): Promise<string>

    getCaveatPacketHash(
      _input: CaveatStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getDelegationPacketHash(
      _input: DelegationStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getDomainHash(overrides?: CallOverrides): Promise<string>

    getEIP712DomainHash(
      contractName: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: CallOverrides,
    ): Promise<string>

    getEip712DomainPacketHash(
      _input: EIP712DomainStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getInvocationArrayPacketHash(
      _input: InvocationStruct[],
      overrides?: CallOverrides,
    ): Promise<string>

    getInvocationPacketHash(
      _input: InvocationStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getMultisigparamsPacketHash(
      _input: MultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getNonce(
      intendedSender: string,
      queue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getReplayprotectionPacketHash(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getSignedbatchPacketHash(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getSigneddelegationArrayPacketHash(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides,
    ): Promise<string>

    getSigneddelegationPacketHash(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getSignedmultisigparamsPacketHash(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    getTransactionPacketHash(
      _input: TransactionStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    invoke(
      batch: InvocationStruct[],
      sender: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    specialSender(overrides?: CallOverrides): Promise<string>

    verifySignedBatch(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    verifySignedDelegation(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<string>

    verifySignedMultisigParams(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<string>
  }

  filters: {}

  estimateGas: {
    domainHash(overrides?: CallOverrides): Promise<BigNumber>

    enforceReplayProtection(
      intendedSender: string,
      protection: ReplayProtectionStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    exec(overrides?: CallOverrides): Promise<BigNumber>

    execFrom(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    getAddressArrayPacketHash(
      _input: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getBatchPacketHash(
      _input: BatchStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getCaveatArrayPacketHash(
      _input: CaveatStruct[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getCaveatPacketHash(
      _input: CaveatStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDelegationPacketHash(
      _input: DelegationStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDomainHash(overrides?: CallOverrides): Promise<BigNumber>

    getEIP712DomainHash(
      contractName: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getEip712DomainPacketHash(
      _input: EIP712DomainStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getInvocationArrayPacketHash(
      _input: InvocationStruct[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getInvocationPacketHash(
      _input: InvocationStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getMultisigparamsPacketHash(
      _input: MultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNonce(
      intendedSender: string,
      queue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getReplayprotectionPacketHash(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getSignedbatchPacketHash(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getSigneddelegationArrayPacketHash(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getSigneddelegationPacketHash(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getSignedmultisigparamsPacketHash(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTransactionPacketHash(
      _input: TransactionStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    invoke(
      batch: InvocationStruct[],
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    specialSender(overrides?: CallOverrides): Promise<BigNumber>

    verifySignedBatch(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    verifySignedDelegation(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    verifySignedMultisigParams(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    domainHash(overrides?: CallOverrides): Promise<PopulatedTransaction>

    enforceReplayProtection(
      intendedSender: string,
      protection: ReplayProtectionStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    exec(overrides?: CallOverrides): Promise<PopulatedTransaction>

    execFrom(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    getAddressArrayPacketHash(
      _input: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getBatchPacketHash(
      _input: BatchStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCaveatArrayPacketHash(
      _input: CaveatStruct[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCaveatPacketHash(
      _input: CaveatStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getDelegationPacketHash(
      _input: DelegationStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getDomainHash(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getEIP712DomainHash(
      contractName: string,
      version: string,
      chainId: BigNumberish,
      verifyingContract: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getEip712DomainPacketHash(
      _input: EIP712DomainStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getInvocationArrayPacketHash(
      _input: InvocationStruct[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getInvocationPacketHash(
      _input: InvocationStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getMultisigparamsPacketHash(
      _input: MultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getNonce(
      intendedSender: string,
      queue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getReplayprotectionPacketHash(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getSignedbatchPacketHash(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getSigneddelegationArrayPacketHash(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getSigneddelegationPacketHash(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getSignedmultisigparamsPacketHash(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTransactionPacketHash(
      _input: TransactionStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    invoke(
      batch: InvocationStruct[],
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    specialSender(overrides?: CallOverrides): Promise<PopulatedTransaction>

    verifySignedBatch(
      _input: SignedBatchStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    verifySignedDelegation(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    verifySignedMultisigParams(
      _input: SignedMultisigParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
