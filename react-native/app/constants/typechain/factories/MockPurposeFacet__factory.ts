/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  MockPurposeFacet,
  MockPurposeFacetInterface,
} from '../MockPurposeFacet'

const _abi = [
  {
    inputs: [],
    name: 'purpose',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'purpose_',
        type: 'string',
      },
    ],
    name: 'setPurpose',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506105ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806370740aab1461003b578063eb68757f14610059575b600080fd5b61004361006e565b6040516100509190610248565b60405180910390f35b61006c610067366004610363565b610102565b005b606060008001805461007f906103b3565b80601f01602080910402602001604051908101604052809291908181526020018280546100ab906103b3565b80156100f85780601f106100cd576101008083540402835291602001916100f8565b820191906000526020600020905b8154815290600101906020018083116100db57829003601f168201915b5050505050905090565b61010a61011a565b600061011682826104b3565b5050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031661014d61017e565b6001600160a01b03161461017c5760405162461bcd60e51b815260040161017390610571565b60405180910390fd5b565b60003033036101d457600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506101d79050565b50335b90565b60005b838110156101f55781810151838201526020016101dd565b83811115610204576000848401525b50505050565b601f01601f191690565b600061021e825190565b8084526020840193506102358185602086016101da565b61023e8161020a565b9093019392505050565b602080825281016102598184610214565b9392505050565b634e487b7160e01b600052604160045260246000fd5b61027f8261020a565b81018181106001600160401b038211171561029c5761029c610260565b6040525050565b60006102ae60405190565b90506102ba8282610276565b919050565b60006001600160401b038211156102d8576102d8610260565b6102e18261020a565b60200192915050565b82818337506000910152565b6000610309610304846102bf565b6102a3565b90508281526020810184848401111561032457610324600080fd5b61032f8482856102ea565b509392505050565b600082601f83011261034b5761034b600080fd5b813561035b8482602086016102f6565b949350505050565b60006020828403121561037857610378600080fd5b81356001600160401b0381111561039157610391600080fd5b61035b84828501610337565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806103c757607f821691505b6020821081036103d9576103d961039d565b50919050565b60006103eb6101d78381565b92915050565b6103fa836103df565b81546008840282811b60001990911b908116901990911617825550505050565b60006104278184846103f1565b505050565b818110156101165761043f60008261041a565b60010161042c565b601f821115610427576000818152602090206020601f8501048101602085101561046e5750805b6104806020601f86010483018261042c565b5050505050565b6000196008929092029190911c191690565b60006104a58383610487565b600290930290921792915050565b81516001600160401b038111156104cc576104cc610260565b6104d682546103b3565b6104e1828285610447565b6020601f83116001811461050f57600084156104fd5750858201515b6105078582610499565b865550610569565b600085815260208120601f198616915b8281101561053f578885015182556020948501946001909201910161051f565b8683101561055c5784890151610558601f891682610487565b8355505b6001600288020188555050505b505050505050565b602080825281016103eb81602281527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60208201526132b960f11b60408201526060019056fea264697066735822122064723b448330b7c2e199d5eb5d92690991d524e974faa57ac96a760ebf709d6f64736f6c634300080f0033'

type MockPurposeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: MockPurposeFacetConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class MockPurposeFacet__factory extends ContractFactory {
  constructor(...args: MockPurposeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'MockPurposeFacet'
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MockPurposeFacet> {
    return super.deploy(overrides || {}) as Promise<MockPurposeFacet>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): MockPurposeFacet {
    return super.attach(address) as MockPurposeFacet
  }
  connect(signer: Signer): MockPurposeFacet__factory {
    return super.connect(signer) as MockPurposeFacet__factory
  }
  static readonly contractName: 'MockPurposeFacet'
  public readonly contractName: 'MockPurposeFacet'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): MockPurposeFacetInterface {
    return new utils.Interface(_abi) as MockPurposeFacetInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockPurposeFacet {
    return new Contract(address, _abi, signerOrProvider) as MockPurposeFacet
  }
}
