/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { Test2Facet, Test2FacetInterface } from '../Test2Facet'

const _abi = [
  {
    inputs: [],
    name: 'test2Func1',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func10',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func11',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func12',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func13',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func14',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func15',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func16',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func17',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func18',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func19',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func2',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func20',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func3',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func4',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func5',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func6',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func7',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func8',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test2Func9',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b50610123806100206000396000f3fe6080604052348015600f57600080fd5b506004361060e65760003560e01c806303feeeae1460eb5780630c103a931460eb5780630e4cd7fc1460eb578063148843091460eb57806317fd06e71460eb5780632e4639581460eb5780635fd6312b1460eb5780636dc16b011460eb578063792a8e2e1460eb578063884280a61460eb5780638ee8be301460eb57806391d0396b1460eb578063c670641d1460eb578063ca5fa5c01460eb578063caae8f231460eb578063d2f0c73e1460eb578063e5f687b21460eb578063e7de23a41460eb578063ea36b5581460eb578063ef3f4d781460eb575b600080fd5b00fea2646970667358221220c0fcf856d351316a1c06c7c48fc98cbdfe96f166c494d1958a02904645d9f2c264736f6c63430008120033'

type Test2FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: Test2FacetConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Test2Facet__factory extends ContractFactory {
  constructor(...args: Test2FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'Test2Facet'
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<Test2Facet> {
    return super.deploy(overrides || {}) as Promise<Test2Facet>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): Test2Facet {
    return super.attach(address) as Test2Facet
  }
  connect(signer: Signer): Test2Facet__factory {
    return super.connect(signer) as Test2Facet__factory
  }
  static readonly contractName: 'Test2Facet'
  public readonly contractName: 'Test2Facet'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): Test2FacetInterface {
    return new utils.Interface(_abi) as Test2FacetInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Test2Facet {
    return new Contract(address, _abi, signerOrProvider) as Test2Facet
  }
}
