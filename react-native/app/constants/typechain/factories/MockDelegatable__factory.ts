/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  MockDelegatable,
  MockDelegatableInterface,
} from '../MockDelegatable'

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'contractName',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'alwaysFail',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation[]',
        name: 'batch',
        type: 'tuple[]',
      },
    ],
    name: 'contractInvoke',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'domainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_input',
        type: 'address[]',
      },
    ],
    name: 'getAddressArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'to',
                    type: 'address',
                  },
                  {
                    internalType: 'uint256',
                    name: 'gasLimit',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Transaction',
                name: 'transaction',
                type: 'tuple',
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'delegate',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes32',
                        name: 'authority',
                        type: 'bytes32',
                      },
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'enforcer',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes',
                            name: 'terms',
                            type: 'bytes',
                          },
                        ],
                        internalType: 'struct Caveat[]',
                        name: 'caveats',
                        type: 'tuple[]',
                      },
                      {
                        internalType: 'uint256',
                        name: 'salt',
                        type: 'uint256',
                      },
                    ],
                    internalType: 'struct Delegation',
                    name: 'message',
                    type: 'tuple',
                  },
                  {
                    internalType: 'bytes',
                    name: 'signature',
                    type: 'bytes',
                  },
                  {
                    internalType: 'address',
                    name: 'signer',
                    type: 'address',
                  },
                ],
                internalType: 'struct SignedDelegation[]',
                name: 'authority',
                type: 'tuple[]',
              },
            ],
            internalType: 'struct Invocation[]',
            name: 'invocations',
            type: 'tuple[]',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'queue',
                type: 'uint256',
              },
            ],
            internalType: 'struct ReplayProtection',
            name: 'replayProtection',
            type: 'tuple',
          },
        ],
        internalType: 'struct Batch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getBatchPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'enforcer',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'terms',
            type: 'bytes',
          },
        ],
        internalType: 'struct Caveat[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getCaveatArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'enforcer',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'terms',
            type: 'bytes',
          },
        ],
        internalType: 'struct Caveat',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getCaveatPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'delegate',
            type: 'address',
          },
          {
            internalType: 'bytes32',
            name: 'authority',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'enforcer',
                type: 'address',
              },
              {
                internalType: 'bytes',
                name: 'terms',
                type: 'bytes',
              },
            ],
            internalType: 'struct Caveat[]',
            name: 'caveats',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'salt',
            type: 'uint256',
          },
        ],
        internalType: 'struct Delegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getDelegationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDomainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'contractName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'version',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'chainId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'verifyingContract',
        type: 'address',
      },
    ],
    name: 'getEIP712DomainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'version',
            type: 'string',
          },
          {
            internalType: 'uint256',
            name: 'chainId',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'verifyingContract',
            type: 'address',
          },
        ],
        internalType: 'struct EIP712Domain',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getEip712DomainPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getInvocationArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getInvocationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address[]',
            name: 'signers',
            type: 'address[]',
          },
          {
            internalType: 'uint256',
            name: 'threshold',
            type: 'uint256',
          },
        ],
        internalType: 'struct MultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getMultisigparamsPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'intendedSender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'queue',
        type: 'uint256',
      },
    ],
    name: 'getNonce',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'queue',
            type: 'uint256',
          },
        ],
        internalType: 'struct ReplayProtection',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getReplayprotectionPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSignedbatchPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getSigneddelegationArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSigneddelegationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address[]',
                name: 'signers',
                type: 'address[]',
              },
              {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256',
              },
            ],
            internalType: 'struct MultisigParams',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedMultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSignedmultisigparamsPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'gasLimit',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'value',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
        ],
        internalType: 'struct Transaction',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getTransactionPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: 'signedBatch',
        type: 'tuple',
      },
    ],
    name: 'invoke',
    outputs: [
      {
        internalType: 'bool',
        name: 'success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'purpose',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'purpose_',
        type: 'string',
      },
    ],
    name: 'setPurpose',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedBatch',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedDelegation',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address[]',
                name: 'signers',
                type: 'address[]',
              },
              {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256',
              },
            ],
            internalType: 'struct MultisigParams',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedMultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedMultisigParams',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x60e0604052601360a09081527f57686174206973206d7920707572706f73653f0000000000000000000000000060c0526002906200003e90826200031a565b503480156200004c57600080fd5b50604051620032d5380380620032d58339810160408190526200006f9162000520565b6040805180820190915260018152603160f81b602082015281906200009782824630620000b8565b60805250620000b19050620000ab62000126565b62000184565b50620005db565b6000807f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8680519060200120868051906020012086866040516020016200010495949392919062000585565b60408051808303601f1901815291905280516020909101209695505050505050565b60003033036200017e57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620001819050565b50335b90565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200021757607f821691505b6020821081036200022c576200022c620001ec565b50919050565b600062000240620001818381565b92915050565b620002518362000232565b81546008840282811b60001990911b908116901990911617825550505050565b60006200028081848462000246565b505050565b81811015620002a4576200029b60008262000271565b60010162000285565b5050565b601f82111562000280576000818152602090206020601f85010481016020851015620002d15750805b620002e56020601f86010483018262000285565b5050505050565b6000196008929092029190911c191690565b60006200030c8383620002ec565b600290930290921792915050565b81516001600160401b03811115620003365762000336620001d6565b62000342825462000202565b6200034f828285620002a8565b6020601f8311600181146200038257600084156200036d5750858201515b620003798582620002fe565b865550620003e1565b600085815260208120601f198616915b82811015620003b4578885015182556020948501946001909201910162000392565b86831015620003d45784890151620003d0601f891682620002ec565b8355505b6001600288020188555050505b505050505050565b601f01601f191690565b620003fe82620003e9565b81018181106001600160401b03821117156200041e576200041e620001d6565b6040525050565b60006200043160405190565b90506200043f8282620003f3565b919050565b60006001600160401b03821115620004605762000460620001d6565b6200046b82620003e9565b60200192915050565b60005b838110156200049157818101518382015260200162000477565b83811115620004a1576000848401525b50505050565b6000620004be620004b88462000444565b62000425565b905082815260208101848484011115620004db57620004db600080fd5b620004e884828562000474565b509392505050565b600082601f830112620005065762000506600080fd5b815162000518848260208601620004a7565b949350505050565b600060208284031215620005375762000537600080fd5b81516001600160401b03811115620005525762000552600080fd5b6200051884828501620004f0565b805b82525050565b60006001600160a01b03821662000240565b620005628162000568565b60a0810162000595828862000560565b620005a4602083018762000560565b620005b3604083018662000560565b620005c2606083018562000560565b620005d160808301846200057a565b9695505050505050565b608051612cd7620005fe6000396000818161034401526107e60152612cd76000f3fe608060405234801561001057600080fd5b506004361061016a5760003560e01c8063037dd6ff1461016f57806307cae44d146101985780630deeb600146101ab57806314239de7146101be5780631a352851146101de5780632b163c2b146101e85780633c9f21a0146101fb57806359b989ca1461020e5780636eb8aaf41461022157806370740aab14610234578063715018a61461024957806383ebb7711461025157806389535803146102595780638da5cb5b1461026c57806393574eed146102745780639dfae31214610287578063a262ec5b1461029a578063a2c6cb02146102ba578063bbd75817146102cd578063bdcc1179146102e0578063d327c1eb146102f3578063da33426114610306578063dbefc91f14610319578063dbf122001461032c578063dfe86ac51461033f578063e315644d14610366578063eb68757f14610379578063f2fde38b1461038c578063f4fbfd2f1461039f578063fb293bd5146103b2575b600080fd5b61018261017d36600461178f565b6103c5565b60405161018f91906117d1565b60405180910390f35b6101826101a63660046118f1565b61043c565b6101826101b936600461192b565b6104ac565b6101d16101cc366004611bb1565b6104f2565b60405161018f9190611bf4565b6101e661062e565b005b6101826101f6366004611c02565b610646565b610182610209366004611cd5565b610696565b61018261021c366004611d0f565b6106de565b6101d161022f366004611d49565b610732565b61023c610742565b60405161018f9190611de3565b6101e66107d0565b6101826107e4565b610182610267366004611df4565b610808565b6101d1610831565b610182610282366004611d49565b610840565b610182610295366004611e31565b610871565b6102ad6102a8366004611e9c565b6108b1565b60405161018f9190611eeb565b6101826102c8366004611ef9565b6108c5565b6101826102db366004611f33565b6108f5565b6101826102ee366004611f6d565b610948565b610182610301366004611fa7565b610986565b6102ad610314366004612059565b6109e2565b6101d16103273660046118f1565b610a2e565b61018261033a366004612093565b610a3e565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6101826103743660046120cd565b610a85565b6101e6610387366004612107565b610aed565b6101e661039a366004612141565b610b05565b6101826103ad366004611bb1565b610b3f565b6101826103c0366004612162565b610b70565b6000606060005b835181101561042d57816103f88583815181106103eb576103eb61219c565b6020026020010151610840565b6040516020016104099291906121d4565b604051602081830303815290604052915080806104259061220d565b9150506103cc565b50805160209091012092915050565b6000807ff562bb2887ad46fa4ed8270ec3eb4c4ddaaa8eac6df6a306f0539ed308b63f3361046d84600001516104ac565b602080860151805190820120604080880151905161048d95949301612227565b60408051601f1981840301815291905280516020909101209392505050565b6000807ffdaf74c87f80f0094315fc4e85684a5c59e57ac35e3b5b0dfa85df43b3439b576104dd84600001516108c5565b60208086015160405161048d9493920161225c565b6000806105028360000151610948565b9050600061050e6107e4565b82604051602001610520929190612284565b60405160208183030381529060405280519060200120905083604001516001600160a01b031660006001600160a01b03160361056f576000610566828660200151610bd8565b95945050505050565b600084604001516001600160a01b0316631626ba7e8387602001516040518363ffffffff1660e01b81526004016105a79291906122ad565b602060405180830381865afa1580156105c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e891906122e8565b9050630b135d3f60e11b6001600160e01b03198216146106235760405162461bcd60e51b815260040161061a90612334565b60405180910390fd5b505050506040015190565b60405162461bcd60e51b815260040161061a90612368565b6000807f16ce3e7a160ccd1337156522b7b75f86515dce2f84625303c8cb53733473e20e61067784600001516108f5565b61068485602001516103c5565b60405160200161048d9392919061225c565b600080600080516020612c828339815191528360000151805190602001208460200151805190602001208560400151866060015160405160200161048d959493929190612378565b6000807fc868c829d0d249972f3cbb7c51600c4e74dd6ed52ba5192cddc7526c48257a9f836000015184602001516107198660400151610b70565b866060015160405160200161048d9594939291906123c4565b60008061050283600001516106de565b6002805461074f9061241c565b80601f016020809104026020016040519081016040528092919081815260200182805461077b9061241c565b80156107c85780601f1061079d576101008083540402835291602001916107c8565b820191906000526020600020905b8154815290600101906020018083116107ab57829003601f168201915b505050505081565b6107d8610ca1565b6107e26000610ce0565b565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0382166000908152602081815260408083208484529091529020545b92915050565b6001546001600160a01b031690565b6000807fd1ffa191aacebaec8a0767b176d64c69a029e83c7bae7f3fdde5f0c5fdaf350361046d84600001516106de565b6000807fe8d3d963b33868fb116316bc3fd55e8f49123f30e4418f71e140d54b7cd3b2b98360000151846020015160405160200161048d9392919061225c565b60006108be838333610d32565b9392505050565b6000816040516020016108d89190612498565b604051602081830303815290604052805190602001209050919050565b6000807f8e96309e8d7caab0cd12f924b5671b439d8ee99659ea36357e8cc30e7fe3229383600001518460200151856040015186606001518051906020012060405160200161048d9594939291906123c4565b6000807f6d01ae502c3d43977868cf20f1077c1dc1970131f37d80ed21ecf591e958d8106109798460000151610a85565b6106848560200151610871565b600080600080516020612c828339815191528680519060200120868051906020012086866040516020016109be959493929190612378565b60408051601f1981840301815291905280516020909101209150505b949350505050565b6000806109f16101cc846124a4565b9050366109fe84806124b0565b9050610a1b82610a1636849003840160208501611e31565b610ed2565b6109da610a2882806124d4565b84610d32565b60008061050283600001516104ac565b6000807f80ad7e1b04ee6d994a125f4714ca0720908bd80ed16063ec8aee4b88e9253e2d836000015184602001518051906020012060405160200161048d93929190612530565b6000606060005b835181101561042d5781610ab8858381518110610aab57610aab61219c565b6020026020010151610646565b604051602001610ac99291906121d4565b60405160208183030381529060405291508080610ae59061220d565b915050610a8c565b610af5610ca1565b6002610b018282612619565b5050565b610b0d610ca1565b6001600160a01b038116610b335760405162461bcd60e51b815260040161061a9061271d565b610b3c81610ce0565b50565b6000807f220f51b2634e2a90b6fb21f89acf38590ea901923e6240ec90bcd0db8314524c61046d8460000151610948565b6000606060005b835181101561042d5781610ba3858381518110610b9657610b9661219c565b6020026020010151610a3e565b604051602001610bb49291906121d4565b60405160208183030381529060405291508080610bd09061220d565b915050610b77565b6000806000808451604114610bf3576000935050505061082b565b50505060208201516040830151606084015160001a601b811015610c1f57610c1c601b8261272d565b90505b8060ff16601b14158015610c3757508060ff16601c14155b15610c48576000935050505061082b565b60018682858560405160008152602001604052604051610c6b949392919061275c565b6020604051602081039080840390855afa158015610c8d573d6000803e3d6000fd5b50505060206040510351935050505061082b565b610ca9610f50565b6001600160a01b0316610cba610831565b6001600160a01b0316146107e25760405162461bcd60e51b815260040161061a906127c3565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b83811015610eca5736858583818110610d5157610d5161219c565b9050602002810190610d6391906127d3565b604080516060810190915290915060009080610d7f84806127ed565b610d8d906020810190612141565b6001600160a01b03168152602001610da584806127ed565b604001358152602001610db884806127ed565b610dc6906060810190612807565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452509293508792509050610e1060208501856124d4565b90501115610e3b57610e37610e2860208501856124d4565b610e319161285d565b83610fac565b5090505b6000610e4784806127ed565b610e509061286a565b80519091506001600160a01b03163014610e7c5760405162461bcd60e51b815260040161061a906128bc565b610e94816000015182606001518360200151856110e6565b955085610eb35760405162461bcd60e51b815260040161061a9061290a565b505050508080610ec29061220d565b915050610d36565b509392505050565b60208082015182516001600160a01b038516600090815280845260408082208483529094529290922054909190610f0a90600161291a565b8114610f285760405162461bcd60e51b815260040161061a9061296d565b6001600160a01b03909316600090815260208181526040808320938352929052209190915550565b6000303303610fa657600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610fa99050565b50335b90565b60008080805b85518110156110dc576000868281518110610fcf57610fcf61219c565b602002602001015190506000610fe482610732565b905061101c6040518060400160405280601481526020017364656c65676174696f6e5369676e65723a20257360601b815250826111c6565b81516000849003611050576020810151156110495760405162461bcd60e51b815260040161061a906129bc565b8196508195505b856001600160a01b0316826001600160a01b0316146110815760405162461bcd60e51b815260040161061a90612a0e565b848160200151146110a45760405162461bcd60e51b815260040161061a90612a68565b60006110af84610840565b90506110c082604001518a8361120b565b9051955093508291506110d490508161220d565b915050610fb2565b50505b9250929050565b60008084836040516020016110fc929190612aa0565b60405160208183030381529060405290506060866001600160a01b031685836040516111289190612ac2565b60006040518083038160008787f1925050503d8060008114611166576040519150601f19603f3d011682016040523d82523d6000602084013e61116b565b606091505b509093509050826111bc578051156111a457600061118882611311565b90508060405162461bcd60e51b815260040161061a9190611de3565b60405162461bcd60e51b815260040161061a9061290a565b5050949350505050565b610b0182826040516024016111dc929190612ace565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052611360565b60005b83518161ffff16101561130b576000848261ffff16815181106112335761123361219c565b60200260200101516000015190506000816001600160a01b0316635068de4c878561ffff16815181106112685761126861219c565b60200260200101516020015187876040518463ffffffff1660e01b815260040161129493929190612b2d565b6020604051808303816000875af11580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d79190612b74565b9050806112f65760405162461bcd60e51b815260040161061a90612bc7565b5050808061130390612bd7565b91505061120e565b50505050565b80516060906044811015611335575050604080516020810190915260008152919050565b6004830180516003198301825290936113579083810160200190602401612c47565b93525090919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6113aa82611381565b81018181106001600160401b03821117156113c7576113c761138b565b6040525050565b60006113d960405190565b90506113e582826113a1565b919050565b60006001600160401b038211156114035761140361138b565b5060209081020190565b60006001600160a01b03821661082b565b6114278161140d565b8114610b3c57600080fd5b803561082b8161141e565b80611427565b803561082b8161143d565b60006001600160401b038211156114675761146761138b565b61147082611381565b60200192915050565b82818337506000910152565b60006114986114938461144e565b6113ce565b9050828152602081018484840111156114b3576114b3600080fd5b610eca848285611479565b600082601f8301126114d2576114d2600080fd5b81356109da848260208601611485565b6000604082840312156114f7576114f7600080fd5b61150160406113ce565b9050600061150f8484611432565b82525060208201356001600160401b0381111561152e5761152e600080fd5b61153a848285016114be565b60208301525092915050565b6000611554611493846113ea565b8381529050602080820190840283018581111561157357611573600080fd5b835b818110156115b35780356001600160401b0381111561159657611596600080fd5b8086016115a389826114e2565b8552505060209283019201611575565b5050509392505050565b600082601f8301126115d1576115d1600080fd5b81356109da848260208601611546565b6000608082840312156115f6576115f6600080fd5b61160060806113ce565b9050600061160e8484611432565b825250602061161f84848301611443565b60208301525060408201356001600160401b0381111561164157611641600080fd5b61164d848285016115bd565b604083015250606061166184828501611443565b60608301525092915050565b60006060828403121561168257611682600080fd5b61168c60606113ce565b905081356001600160401b038111156116a7576116a7600080fd5b6116b3848285016115e1565b82525060208201356001600160401b038111156116d2576116d2600080fd5b6116de848285016114be565b60208301525060406116f284828501611432565b60408301525092915050565b600061170c611493846113ea565b8381529050602080820190840283018581111561172b5761172b600080fd5b835b818110156115b35780356001600160401b0381111561174e5761174e600080fd5b80860161175b898261166d565b855250506020928301920161172d565b600082601f83011261177f5761177f600080fd5b81356109da8482602086016116fe565b6000602082840312156117a4576117a4600080fd5b81356001600160401b038111156117bd576117bd600080fd5b6109da8482850161176b565b805b82525050565b6020810161082b82846117c9565b60006117ed611493846113ea565b8381529050602080820190840283018581111561180c5761180c600080fd5b835b818110156115b357806118218882611432565b8452506020928301920161180e565b600082601f83011261184457611844600080fd5b81356109da8482602086016117df565b60006040828403121561186957611869600080fd5b61187360406113ce565b905081356001600160401b0381111561188e5761188e600080fd5b61189a84828501611830565b825250602061153a84848301611443565b6000606082840312156118c0576118c0600080fd5b6118ca60606113ce565b905081356001600160401b038111156118e5576118e5600080fd5b6116b384828501611854565b60006020828403121561190657611906600080fd5b81356001600160401b0381111561191f5761191f600080fd5b6109da848285016118ab565b60006020828403121561194057611940600080fd5b81356001600160401b0381111561195957611959600080fd5b6109da84828501611854565b60006080828403121561197a5761197a600080fd5b61198460806113ce565b905060006119928484611432565b82525060206119a384848301611443565b60208301525060406119b784828501611443565b60408301525060608201356001600160401b038111156119d9576119d9600080fd5b611661848285016114be565b6000604082840312156119fa576119fa600080fd5b611a0460406113ce565b905081356001600160401b03811115611a1f57611a1f600080fd5b611a2b84828501611965565b82525060208201356001600160401b03811115611a4a57611a4a600080fd5b61153a8482850161176b565b6000611a64611493846113ea565b83815290506020808201908402830185811115611a8357611a83600080fd5b835b818110156115b35780356001600160401b03811115611aa657611aa6600080fd5b808601611ab389826119e5565b8552505060209283019201611a85565b600082601f830112611ad757611ad7600080fd5b81356109da848260208601611a56565b600060408284031215611afc57611afc600080fd5b611b0660406113ce565b9050600061189a8484611443565b600060608284031215611b2957611b29600080fd5b611b3360406113ce565b905081356001600160401b03811115611b4e57611b4e600080fd5b611b5a84828501611ac3565b825250602061153a84848301611ae7565b600060608284031215611b8057611b80600080fd5b611b8a60606113ce565b905081356001600160401b03811115611ba557611ba5600080fd5b6116b384828501611b14565b600060208284031215611bc657611bc6600080fd5b81356001600160401b03811115611bdf57611bdf600080fd5b6109da84828501611b6b565b6117cb8161140d565b6020810161082b8284611beb565b600060208284031215611c1757611c17600080fd5b81356001600160401b03811115611c3057611c30600080fd5b6109da848285016119e5565b600060808284031215611c5157611c51600080fd5b611c5b60806113ce565b905081356001600160401b03811115611c7657611c76600080fd5b611c82848285016114be565b82525060208201356001600160401b03811115611ca157611ca1600080fd5b611cad848285016114be565b6020830152506040611cc184828501611443565b604083015250606061166184828501611432565b600060208284031215611cea57611cea600080fd5b81356001600160401b03811115611d0357611d03600080fd5b6109da84828501611c3c565b600060208284031215611d2457611d24600080fd5b81356001600160401b03811115611d3d57611d3d600080fd5b6109da848285016115e1565b600060208284031215611d5e57611d5e600080fd5b81356001600160401b03811115611d7757611d77600080fd5b6109da8482850161166d565b60005b83811015611d9e578181015183820152602001611d86565b8381111561130b5750506000910152565b6000611db9825190565b808452602084019350611dd0818560208601611d83565b611dd981611381565b9093019392505050565b602080825281016108be8184611daf565b60008060408385031215611e0a57611e0a600080fd5b6000611e168585611432565b9250506020611e2785828601611443565b9150509250929050565b600060408284031215611e4657611e46600080fd5b60006109da8484611ae7565b60008083601f840112611e6757611e67600080fd5b5081356001600160401b03811115611e8157611e81600080fd5b6020830191508360208202830111156110df576110df600080fd5b60008060208385031215611eb257611eb2600080fd5b82356001600160401b03811115611ecb57611ecb600080fd5b611ed785828601611e52565b92509250509250929050565b8015156117cb565b6020810161082b8284611ee3565b600060208284031215611f0e57611f0e600080fd5b81356001600160401b03811115611f2757611f27600080fd5b6109da84828501611830565b600060208284031215611f4857611f48600080fd5b81356001600160401b03811115611f6157611f61600080fd5b6109da84828501611965565b600060208284031215611f8257611f82600080fd5b81356001600160401b03811115611f9b57611f9b600080fd5b6109da84828501611b14565b60008060008060808587031215611fc057611fc0600080fd5b84356001600160401b03811115611fd957611fd9600080fd5b611fe5878288016114be565b94505060208501356001600160401b0381111561200457612004600080fd5b612010878288016114be565b935050604061202187828801611443565b925050606061203287828801611432565b91505092959194509250565b60006060828403121561205357612053600080fd5b50919050565b60006020828403121561206e5761206e600080fd5b81356001600160401b0381111561208757612087600080fd5b6109da8482850161203e565b6000602082840312156120a8576120a8600080fd5b81356001600160401b038111156120c1576120c1600080fd5b6109da848285016114e2565b6000602082840312156120e2576120e2600080fd5b81356001600160401b038111156120fb576120fb600080fd5b6109da84828501611ac3565b60006020828403121561211c5761211c600080fd5b81356001600160401b0381111561213557612135600080fd5b6109da848285016114be565b60006020828403121561215657612156600080fd5b60006109da8484611432565b60006020828403121561217757612177600080fd5b81356001600160401b0381111561219057612190600080fd5b6109da848285016115bd565b634e487b7160e01b600052603260045260246000fd5b60006121bc825190565b6121ca818560208601611d83565b9290920192915050565b60006121e082856121b2565b91506121ed8284806117cb565b5060200192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198203612220576122206121f7565b5060010190565b6080810161223582876117c9565b61224260208301866117c9565b61224f60408301856117c9565b6105666060830184611beb565b6060810161226a82866117c9565b61227760208301856117c9565b6109da60408301846117c9565b61190160f01b8152600201600061229c8285806117cb565b6020820191506121ed8284806117cb565b604081016122bb82856117c9565b81810360208301526109da8184611daf565b6001600160e01b03198116611427565b805161082b816122cd565b6000602082840312156122fd576122fd600080fd5b60006109da84846122dd565b6011815260006020820170494e56414c49445f5349474e415455524560781b815291505b5060200190565b6020808252810161082b81612309565b600d81526000602082016c1248185b1dd85e5cc819985a5b609a1b8152915061232d565b6020808252810161082b81612344565b60a0810161238682886117c9565b61239360208301876117c9565b6123a060408301866117c9565b6123ad60608301856117c9565b6123ba6080830184611beb565b9695505050505050565b60a081016123d282886117c9565b6123df6020830187611beb565b6123ec60408301866117c9565b6123f960608301856117c9565b6123ba60808301846117c9565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061243057607f821691505b60208210810361205357612053612406565b600061244e8383611beb565b505060200190565b6000612460825190565b602083018060005b8381101561248d57815161247c8882612442565b975060208301925050600101612468565b509495945050505050565b60006108be8284612456565b600061082b3683611b6b565b60008235605e19368490030181126124ca576124ca600080fd5b9190910192915050565b6000808335601e19368590030181126124ef576124ef600080fd5b8084019250823591506001600160401b0382111561250f5761250f600080fd5b6020928301928202360383131561252857612528600080fd5b509250929050565b6060810161253e82866117c9565b6122776020830185611beb565b600061082b610fa98381565b6125608361254b565b81546008840282811b60001990911b908116901990911617825550505050565b600061258d818484612557565b505050565b81811015610b01576125a5600082612580565b600101612592565b601f82111561258d576000818152602090206020601f850104810160208510156125d45750805b6125e66020601f860104830182612592565b5050505050565b6000196008929092029190911c191690565b600061260b83836125ed565b600290930290921792915050565b81516001600160401b038111156126325761263261138b565b61263c825461241c565b6126478282856125ad565b6020601f83116001811461267557600084156126635750858201515b61266d85826125ff565b8655506126cf565b600085815260208120601f198616915b828110156126a55788850151825560209485019460019092019101612685565b868310156126c257848901516126be601f8916826125ed565b8355505b6001600288020188555050505b505050505050565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291505b5060400190565b6020808252810161082b816126d7565b600060ff8216915060ff831692508260ff0382111561274e5761274e6121f7565b500190565b60ff81166117cb565b6080810161276a82876117c9565b6127776020830186612753565b61278460408301856117c9565b61056660608301846117c9565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061232d565b6020808252810161082b81612791565b60008235603e19368490030181126124ca576124ca600080fd5b60008235607e19368490030181126124ca576124ca600080fd5b6000808335601e193685900301811261282257612822600080fd5b8084019250823591506001600160401b0382111561284257612842600080fd5b60208301925060018202360383131561252857612528600080fd5b60006108be3684846116fe565b600061082b3683611965565b602981526000602082017f44656c6567617461626c65436f72653a696e76616c69642d696e766f636174698152681bdb8b5d185c99d95d60ba1b60208201529150612716565b6020808252810161082b81612876565b602181526000602082017f44656c6567617461626c65436f72653a3a657865637574696f6e2d6661696c658152601960fa1b60208201529150612716565b6020808252810161082b816128cc565b6000821982111561274e5761274e6121f7565b602381526000602082017f44656c6567617461626c65436f72653a6e6f6e6365322d6f75742d6f662d6f728152623232b960e91b60208201529150612716565b6020808252810161082b8161292d565b602281526000602082017f43616e44656c65676174653a696e76616c69642d726f6f742d617574686f7269815261747960f01b60208201529150612716565b6020808252810161082b8161297d565b602581526000602082017f43616e44656c65676174653a696e76616c69642d64656c65676174696f6e2d7381526434b3b732b960d91b60208201529150612716565b6020808252810161082b816129cc565b602d81526000602082017f43616e44656c65676174653a696e76616c69642d617574686f726974792d646581526c6c65676174696f6e2d6c696e6b60981b60208201529150612716565b6020808252810161082b81612a1e565b600061082b8260601b90565b600061082b82612a78565b6117cb612a9b8261140d565b612a84565b6000612aac82856121b2565b9150612ab88284612a8f565b5060140192915050565b60006108be82846121b2565b60408082528101612adf8185611daf565b90506108be6020830184611beb565b80516000906060840190612b028582611beb565b506020830151612b1560208601826117c9565b50604083015184820360408601526105668282611daf565b60608082528101612b3e8186611daf565b90508181036020830152612b528185612aee565b90506109da60408301846117c9565b801515611427565b805161082b81612b61565b600060208284031215612b8957612b89600080fd5b60006109da8484612b69565b601b81526000602082017a10d85b91195b1959d85d194e98d85d99585d0b5c995a9958dd1959602a1b8152915061232d565b6020808252810161082b81612b95565b61ffff16600061fffe198201612220576122206121f7565b6000612bfd6114938461144e565b905082815260208101848484011115612c1857612c18600080fd5b610eca848285611d83565b600082601f830112612c3757612c37600080fd5b81516109da848260208601612bef565b600060208284031215612c5c57612c5c600080fd5b81516001600160401b03811115612c7557612c75600080fd5b6109da84828501612c2356fe8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400fa2646970667358221220855501961c492199c8fea61445c57ba5c2398bd39dd6120a3b0bb538df2d976164736f6c634300080f0033'

type MockDelegatableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: MockDelegatableConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class MockDelegatable__factory extends ContractFactory {
  constructor(...args: MockDelegatableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'MockDelegatable'
  }

  deploy(
    contractName: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MockDelegatable> {
    return super.deploy(
      contractName,
      overrides || {},
    ) as Promise<MockDelegatable>
  }
  getDeployTransaction(
    contractName: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(contractName, overrides || {})
  }
  attach(address: string): MockDelegatable {
    return super.attach(address) as MockDelegatable
  }
  connect(signer: Signer): MockDelegatable__factory {
    return super.connect(signer) as MockDelegatable__factory
  }
  static readonly contractName: 'MockDelegatable'
  public readonly contractName: 'MockDelegatable'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): MockDelegatableInterface {
    return new utils.Interface(_abi) as MockDelegatableInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockDelegatable {
    return new Contract(address, _abi, signerOrProvider) as MockDelegatable
  }
}
