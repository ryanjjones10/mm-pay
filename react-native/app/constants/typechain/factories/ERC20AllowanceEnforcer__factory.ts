/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  ERC20AllowanceEnforcer,
  ERC20AllowanceEnforcerInterface,
} from '../ERC20AllowanceEnforcer'

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'terms',
        type: 'bytes',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'value',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
        ],
        internalType: 'struct Intent',
        name: 'transaction',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'delegationHash',
        type: 'bytes32',
      },
    ],
    name: 'enforceCaveat',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b5061051a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635068de4c14610030575b600080fd5b61004361003e366004610279565b610059565b6040516100509190610301565b60405180910390f35b600080610069604085018561030f565b6100789160049160009161036d565b6100819161039d565b905063a9059cbb60e01b6001600160e01b0319821681146100bd5760405162461bcd60e51b81526004016100b49061041d565b60405180910390fd5b60006100fe88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506101ca915050565b9050600061014f610112604089018961030f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250602492506101ca915050565b336000908152602081815260408083208a845290915281208054929350839290919061017c908490610443565b909155505033600090815260208181526040808320898452909152902054828111156101ba5760405162461bcd60e51b81526004016100b4906104a1565b5060019998505050505050505050565b60006101d7826020610443565b835110156101f75760405162461bcd60e51b81526004016100b4906104b1565b50818101602001515b92915050565b60008083601f84011261021b5761021b600080fd5b5081356001600160401b0381111561023557610235600080fd5b60208301915083600182028301111561025057610250600080fd5b9250929050565b60006060828403121561026c5761026c600080fd5b50919050565b8035610200565b6000806000806060858703121561029257610292600080fd5b84356001600160401b038111156102ab576102ab600080fd5b6102b787828801610206565b945094505060208501356001600160401b038111156102d8576102d8600080fd5b6102e487828801610257565b92505060406102f587828801610272565b91505092959194509250565b811515815260208101610200565b6000808335601e193685900301811261032a5761032a600080fd5b8084019250823591506001600160401b0382111561034a5761034a600080fd5b60208301925060018202360383131561036557610365600080fd5b509250929050565b6000808585111561038057610380600080fd5b8386111561039057610390600080fd5b5050820193919092039150565b80356001600160e01b031916828260048210156103d0576103cb6001600160e01b0319836004036008021b90565b831692505b505092915050565b602581526000602082017f4552433230416c6c6f77616e6365456e666f726365723a696e76616c69642d6d815264195d1a1bd960da1b602082015291505b5060400190565b60208082528101610200816103d8565b634e487b7160e01b600052601160045260246000fd5b600082198211156104565761045661042d565b500190565b602981526000602082017f4552433230416c6c6f77616e6365456e666f726365723a616c6c6f77616e63658152680b595e18d95959195960ba1b60208201529150610416565b602080825281016102008161045b565b60208082528101610200816015815274746f55696e743235365f6f75744f66426f756e647360581b60208201526040019056fea26469706673582212203a427af559ddfff73b15e30ff01e8efb4ee3a71714b9392d37754e2d9a69822c64736f6c634300080f0033'

type ERC20AllowanceEnforcerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: ERC20AllowanceEnforcerConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class ERC20AllowanceEnforcer__factory extends ContractFactory {
  constructor(...args: ERC20AllowanceEnforcerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'ERC20AllowanceEnforcer'
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC20AllowanceEnforcer> {
    return super.deploy(overrides || {}) as Promise<ERC20AllowanceEnforcer>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): ERC20AllowanceEnforcer {
    return super.attach(address) as ERC20AllowanceEnforcer
  }
  connect(signer: Signer): ERC20AllowanceEnforcer__factory {
    return super.connect(signer) as ERC20AllowanceEnforcer__factory
  }
  static readonly contractName: 'ERC20AllowanceEnforcer'
  public readonly contractName: 'ERC20AllowanceEnforcer'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ERC20AllowanceEnforcerInterface {
    return new utils.Interface(_abi) as ERC20AllowanceEnforcerInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC20AllowanceEnforcer {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as ERC20AllowanceEnforcer
  }
}
