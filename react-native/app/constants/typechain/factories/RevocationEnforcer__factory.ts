/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  RevocationEnforcer,
  RevocationEnforcerInterface,
} from '../RevocationEnforcer'

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation[]',
        name: 'batch',
        type: 'tuple[]',
      },
    ],
    name: 'contractInvoke',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'domainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_terms',
        type: 'bytes',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'value',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
        ],
        internalType: 'struct Intent',
        name: '_transaction',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'delegationHash',
        type: 'bytes32',
      },
    ],
    name: 'enforceCaveat',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_input',
        type: 'address[]',
      },
    ],
    name: 'getAddressArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'to',
                    type: 'address',
                  },
                  {
                    internalType: 'uint256',
                    name: 'gasLimit',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Transaction',
                name: 'transaction',
                type: 'tuple',
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'delegate',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes32',
                        name: 'authority',
                        type: 'bytes32',
                      },
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'enforcer',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes',
                            name: 'terms',
                            type: 'bytes',
                          },
                        ],
                        internalType: 'struct Caveat[]',
                        name: 'caveats',
                        type: 'tuple[]',
                      },
                      {
                        internalType: 'uint256',
                        name: 'salt',
                        type: 'uint256',
                      },
                    ],
                    internalType: 'struct Delegation',
                    name: 'message',
                    type: 'tuple',
                  },
                  {
                    internalType: 'bytes',
                    name: 'signature',
                    type: 'bytes',
                  },
                  {
                    internalType: 'address',
                    name: 'signer',
                    type: 'address',
                  },
                ],
                internalType: 'struct SignedDelegation[]',
                name: 'authority',
                type: 'tuple[]',
              },
            ],
            internalType: 'struct Invocation[]',
            name: 'invocations',
            type: 'tuple[]',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'queue',
                type: 'uint256',
              },
            ],
            internalType: 'struct ReplayProtection',
            name: 'replayProtection',
            type: 'tuple',
          },
        ],
        internalType: 'struct Batch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getBatchPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'enforcer',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'terms',
            type: 'bytes',
          },
        ],
        internalType: 'struct Caveat[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getCaveatArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'enforcer',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'terms',
            type: 'bytes',
          },
        ],
        internalType: 'struct Caveat',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getCaveatPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'delegate',
            type: 'address',
          },
          {
            internalType: 'bytes32',
            name: 'authority',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'enforcer',
                type: 'address',
              },
              {
                internalType: 'bytes',
                name: 'terms',
                type: 'bytes',
              },
            ],
            internalType: 'struct Caveat[]',
            name: 'caveats',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'salt',
            type: 'uint256',
          },
        ],
        internalType: 'struct Delegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getDelegationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDomainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'contractName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'version',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'chainId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'verifyingContract',
        type: 'address',
      },
    ],
    name: 'getEIP712DomainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'version',
            type: 'string',
          },
          {
            internalType: 'uint256',
            name: 'chainId',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'verifyingContract',
            type: 'address',
          },
        ],
        internalType: 'struct EIP712Domain',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getEip712DomainPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'delegate',
            type: 'address',
          },
          {
            internalType: 'bytes32',
            name: 'authority',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'enforcer',
                type: 'address',
              },
              {
                internalType: 'bytes',
                name: 'terms',
                type: 'bytes',
              },
            ],
            internalType: 'struct Caveat[]',
            name: 'caveats',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'salt',
            type: 'uint256',
          },
        ],
        internalType: 'struct Delegation',
        name: 'delegation',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'domainHash',
        type: 'bytes32',
      },
    ],
    name: 'getExternalDelegationTypedDataHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getInvocationArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getInvocationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address[]',
            name: 'signers',
            type: 'address[]',
          },
          {
            internalType: 'uint256',
            name: 'threshold',
            type: 'uint256',
          },
        ],
        internalType: 'struct MultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getMultisigparamsPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'intendedSender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'queue',
        type: 'uint256',
      },
    ],
    name: 'getNonce',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'queue',
            type: 'uint256',
          },
        ],
        internalType: 'struct ReplayProtection',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getReplayprotectionPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSignedbatchPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getSigneddelegationArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSigneddelegationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address[]',
                name: 'signers',
                type: 'address[]',
              },
              {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256',
              },
            ],
            internalType: 'struct MultisigParams',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedMultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSignedmultisigparamsPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'gasLimit',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'value',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
        ],
        internalType: 'struct Transaction',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getTransactionPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: 'signedBatch',
        type: 'tuple',
      },
    ],
    name: 'invoke',
    outputs: [
      {
        internalType: 'bool',
        name: 'success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: 'signedDelegation',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'domainHash',
        type: 'bytes32',
      },
    ],
    name: 'revokeDelegation',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: 'signedDelegation',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'domainHash',
        type: 'bytes32',
      },
    ],
    name: 'verifyExternalDelegationSignature',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedBatch',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedDelegation',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address[]',
                name: 'signers',
                type: 'address[]',
              },
              {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256',
              },
            ],
            internalType: 'struct MultisigParams',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedMultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedMultisigParams',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  ''

type RevocationEnforcerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: RevocationEnforcerConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class RevocationEnforcer__factory extends ContractFactory {
  constructor(...args: RevocationEnforcerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'RevocationEnforcer'
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<RevocationEnforcer> {
    return super.deploy(overrides || {}) as Promise<RevocationEnforcer>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): RevocationEnforcer {
    return super.attach(address) as RevocationEnforcer
  }
  connect(signer: Signer): RevocationEnforcer__factory {
    return super.connect(signer) as RevocationEnforcer__factory
  }
  static readonly contractName: 'RevocationEnforcer'
  public readonly contractName: 'RevocationEnforcer'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): RevocationEnforcerInterface {
    return new utils.Interface(_abi) as RevocationEnforcerInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): RevocationEnforcer {
    return new Contract(address, _abi, signerOrProvider) as RevocationEnforcer
  }
}
