/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { ERC20, ERC20Interface } from '../ERC20'

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'name_',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'symbol_',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162000de038038062000de083398101604081905262000034916200019a565b600362000042838262000340565b50600462000051828262000340565b5050506200040f565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b62000085826200005a565b81018181106001600160401b0382111715620000a557620000a562000064565b6040525050565b6000620000b860405190565b9050620000c682826200007a565b919050565b60006001600160401b03821115620000e757620000e762000064565b620000f2826200005a565b60200192915050565b60005b8381101562000118578181015183820152602001620000fe565b50506000910152565b6000620001386200013284620000cb565b620000ac565b905082815260208101848484011115620001555762000155600080fd5b62000162848285620000fb565b509392505050565b600082601f830112620001805762000180600080fd5b81516200019284826020860162000121565b949350505050565b60008060408385031215620001b257620001b2600080fd5b82516001600160401b03811115620001cd57620001cd600080fd5b620001db858286016200016a565b92505060208301516001600160401b03811115620001fc57620001fc600080fd5b6200020a858286016200016a565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200023f57607f821691505b60208210810362000254576200025462000214565b50919050565b60006200026b620002688381565b90565b92915050565b6200027c836200025a565b815460001960089490940293841b1916921b91909117905550565b6000620002a681848462000271565b505050565b81811015620002ca57620002c160008262000297565b600101620002ab565b5050565b601f821115620002a6576000818152602090206020601f85010481016020851015620002f75750805b6200030b6020601f860104830182620002ab565b5050505050565b6000196008929092029190911c191690565b600062000332838362000312565b600290930290921792915050565b81516001600160401b038111156200035c576200035c62000064565b6200036882546200022a565b62000375828285620002ce565b6020601f831160018114620003a85760008415620003935750858201515b6200039f858262000324565b86555062000407565b600085815260208120601f198616915b82811015620003da5788850151825560209485019460019092019101620003b8565b86831015620003fa5784890151620003f6601f89168262000312565b8355505b6001600288020188555050505b505050505050565b6109c1806200041f6000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806306fdde031461009e578063095ea7b3146100bc57806318160ddd146100dc57806323b872dd146100ed578063313ce56714610100578063395093511461010f57806370a082311461012257806395d89b411461014b578063a457c2d714610153578063a9059cbb14610166578063dd62ed3e14610179575b600080fd5b6100a661018c565b6040516100b39190610573565b60405180910390f35b6100cf6100ca3660046105cf565b61021e565b6040516100b39190610616565b6002545b6040516100b3919061062a565b6100cf6100fb366004610638565b610238565b60126040516100b39190610691565b6100cf61011d3660046105cf565b61025c565b6100e061013036600461069f565b6001600160a01b031660009081526020819052604090205490565b6100a661027e565b6100cf6101613660046105cf565b61028d565b6100cf6101743660046105cf565b6102d3565b6100e06101873660046106c8565b6102e1565b60606003805461019b90610711565b80601f01602080910402602001604051908101604052809291908181526020018280546101c790610711565b80156102145780601f106101e957610100808354040283529160200191610214565b820191906000526020600020905b8154815290600101906020018083116101f757829003601f168201915b5050505050905090565b60003361022c81858561030c565b60019150505b92915050565b6000336102468582856103c0565b61025185858561040a565b506001949350505050565b60003361022c81858561026f83836102e1565b6102799190610753565b61030c565b60606004805461019b90610711565b6000338161029b82866102e1565b9050838110156102c65760405162461bcd60e51b81526004016102bd906107ab565b60405180910390fd5b610251828686840361030c565b60003361022c81858561040a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103325760405162461bcd60e51b81526004016102bd906107fc565b6001600160a01b0382166103585760405162461bcd60e51b81526004016102bd9061084b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103b390859061062a565b60405180910390a3505050565b60006103cc84846102e1565b9050600019811461040457818110156103f75760405162461bcd60e51b81526004016102bd9061085b565b610404848484840361030c565b50505050565b6001600160a01b0383166104305760405162461bcd60e51b81526004016102bd906108d8565b6001600160a01b0382166104565760405162461bcd60e51b81526004016102bd90610928565b6001600160a01b0383166000908152602081905260409020548181101561048f5760405162461bcd60e51b81526004016102bd9061097b565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906104c6908490610753565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610510919061062a565b60405180910390a3610404565b60005b83811015610538578181015183820152602001610520565b50506000910152565b600061054b825190565b80845260208401935061056281856020860161051d565b601f01601f19169290920192915050565b602080825281016105848184610541565b9392505050565b60006001600160a01b038216610232565b6105a58161058b565b81146105b057600080fd5b50565b80356102328161059c565b806105a5565b8035610232816105be565b600080604083850312156105e5576105e5600080fd5b60006105f185856105b3565b9250506020610602858286016105c4565b9150509250929050565b8015155b82525050565b60208101610232828461060c565b80610610565b602081016102328284610624565b60008060006060848603121561065057610650600080fd5b600061065c86866105b3565b935050602061066d868287016105b3565b925050604061067e868287016105c4565b9150509250925092565b60ff8116610610565b602081016102328284610688565b6000602082840312156106b4576106b4600080fd5b60006106c084846105b3565b949350505050565b600080604083850312156106de576106de600080fd5b60006106ea85856105b3565b9250506020610602858286016105b3565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061072557607f821691505b602082108103610737576107376106fb565b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156102325761023261073d565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b602082015291505b5060400190565b6020808252810161023281610766565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b602082015291506107a4565b60208082528101610232816107bb565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b602082015291506107a4565b602080825281016102328161080c565b6020808252810161023281601d81527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000602082015260400190565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b602082015291506107a4565b6020808252810161023281610896565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b602082015291506107a4565b60208082528101610232816108e8565b602681526000602082017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b602082015291506107a4565b602080825281016102328161093856fea264697066735822122091ffd103508b9ea81c0610e9188f1d43ae82d038c25afefdb2cc6008d3f8b15d64736f6c63430008120033'

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: ERC20ConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'ERC20'
  }

  deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC20> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20>
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {})
  }
  attach(address: string): ERC20 {
    return super.attach(address) as ERC20
  }
  connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory
  }
  static readonly contractName: 'ERC20'
  public readonly contractName: 'ERC20'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20
  }
}
