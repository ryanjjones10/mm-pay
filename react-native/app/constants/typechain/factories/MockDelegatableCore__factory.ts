/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  MockDelegatableCore,
  MockDelegatableCoreInterface,
} from '../MockDelegatableCore'

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'contractName',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    inputs: [],
    name: 'domainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'intendedSender',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'queue',
            type: 'uint256',
          },
        ],
        internalType: 'struct ReplayProtection',
        name: 'protection',
        type: 'tuple',
      },
    ],
    name: 'enforceReplayProtection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'exec',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'execFrom',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_input',
        type: 'address[]',
      },
    ],
    name: 'getAddressArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'to',
                    type: 'address',
                  },
                  {
                    internalType: 'uint256',
                    name: 'gasLimit',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'value',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bytes',
                    name: 'data',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Transaction',
                name: 'transaction',
                type: 'tuple',
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'delegate',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes32',
                        name: 'authority',
                        type: 'bytes32',
                      },
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'enforcer',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes',
                            name: 'terms',
                            type: 'bytes',
                          },
                        ],
                        internalType: 'struct Caveat[]',
                        name: 'caveats',
                        type: 'tuple[]',
                      },
                      {
                        internalType: 'uint256',
                        name: 'salt',
                        type: 'uint256',
                      },
                    ],
                    internalType: 'struct Delegation',
                    name: 'message',
                    type: 'tuple',
                  },
                  {
                    internalType: 'bytes',
                    name: 'signature',
                    type: 'bytes',
                  },
                  {
                    internalType: 'address',
                    name: 'signer',
                    type: 'address',
                  },
                ],
                internalType: 'struct SignedDelegation[]',
                name: 'authority',
                type: 'tuple[]',
              },
            ],
            internalType: 'struct Invocation[]',
            name: 'invocations',
            type: 'tuple[]',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'queue',
                type: 'uint256',
              },
            ],
            internalType: 'struct ReplayProtection',
            name: 'replayProtection',
            type: 'tuple',
          },
        ],
        internalType: 'struct Batch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getBatchPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'enforcer',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'terms',
            type: 'bytes',
          },
        ],
        internalType: 'struct Caveat[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getCaveatArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'enforcer',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'terms',
            type: 'bytes',
          },
        ],
        internalType: 'struct Caveat',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getCaveatPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'delegate',
            type: 'address',
          },
          {
            internalType: 'bytes32',
            name: 'authority',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'enforcer',
                type: 'address',
              },
              {
                internalType: 'bytes',
                name: 'terms',
                type: 'bytes',
              },
            ],
            internalType: 'struct Caveat[]',
            name: 'caveats',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'salt',
            type: 'uint256',
          },
        ],
        internalType: 'struct Delegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getDelegationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDomainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'contractName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'version',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'chainId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'verifyingContract',
        type: 'address',
      },
    ],
    name: 'getEIP712DomainHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'version',
            type: 'string',
          },
          {
            internalType: 'uint256',
            name: 'chainId',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'verifyingContract',
            type: 'address',
          },
        ],
        internalType: 'struct EIP712Domain',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getEip712DomainPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getInvocationArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getInvocationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address[]',
            name: 'signers',
            type: 'address[]',
          },
          {
            internalType: 'uint256',
            name: 'threshold',
            type: 'uint256',
          },
        ],
        internalType: 'struct MultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getMultisigparamsPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'intendedSender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'queue',
        type: 'uint256',
      },
    ],
    name: 'getNonce',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'queue',
            type: 'uint256',
          },
        ],
        internalType: 'struct ReplayProtection',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getReplayprotectionPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSignedbatchPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation[]',
        name: '_input',
        type: 'tuple[]',
      },
    ],
    name: 'getSigneddelegationArrayPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSigneddelegationPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address[]',
                name: 'signers',
                type: 'address[]',
              },
              {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256',
              },
            ],
            internalType: 'struct MultisigParams',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedMultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getSignedmultisigparamsPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'gasLimit',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'value',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
        ],
        internalType: 'struct Transaction',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'getTransactionPacketHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'to',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
              },
              {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
              },
            ],
            internalType: 'struct Transaction',
            name: 'transaction',
            type: 'tuple',
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'delegate',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes32',
                    name: 'authority',
                    type: 'bytes32',
                  },
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'enforcer',
                        type: 'address',
                      },
                      {
                        internalType: 'bytes',
                        name: 'terms',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Caveat[]',
                    name: 'caveats',
                    type: 'tuple[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'salt',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Delegation',
                name: 'message',
                type: 'tuple',
              },
              {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes',
              },
              {
                internalType: 'address',
                name: 'signer',
                type: 'address',
              },
            ],
            internalType: 'struct SignedDelegation[]',
            name: 'authority',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Invocation[]',
        name: 'batch',
        type: 'tuple[]',
      },
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'invoke',
    outputs: [
      {
        internalType: 'bool',
        name: 'success',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'specialSender',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                      },
                      {
                        internalType: 'uint256',
                        name: 'gasLimit',
                        type: 'uint256',
                      },
                      {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                      },
                      {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                      },
                    ],
                    internalType: 'struct Transaction',
                    name: 'transaction',
                    type: 'tuple',
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: 'address',
                            name: 'delegate',
                            type: 'address',
                          },
                          {
                            internalType: 'bytes32',
                            name: 'authority',
                            type: 'bytes32',
                          },
                          {
                            components: [
                              {
                                internalType: 'address',
                                name: 'enforcer',
                                type: 'address',
                              },
                              {
                                internalType: 'bytes',
                                name: 'terms',
                                type: 'bytes',
                              },
                            ],
                            internalType: 'struct Caveat[]',
                            name: 'caveats',
                            type: 'tuple[]',
                          },
                          {
                            internalType: 'uint256',
                            name: 'salt',
                            type: 'uint256',
                          },
                        ],
                        internalType: 'struct Delegation',
                        name: 'message',
                        type: 'tuple',
                      },
                      {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes',
                      },
                      {
                        internalType: 'address',
                        name: 'signer',
                        type: 'address',
                      },
                    ],
                    internalType: 'struct SignedDelegation[]',
                    name: 'authority',
                    type: 'tuple[]',
                  },
                ],
                internalType: 'struct Invocation[]',
                name: 'invocations',
                type: 'tuple[]',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'nonce',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'queue',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct ReplayProtection',
                name: 'replayProtection',
                type: 'tuple',
              },
            ],
            internalType: 'struct Batch',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedBatch',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedBatch',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address',
                name: 'delegate',
                type: 'address',
              },
              {
                internalType: 'bytes32',
                name: 'authority',
                type: 'bytes32',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'enforcer',
                    type: 'address',
                  },
                  {
                    internalType: 'bytes',
                    name: 'terms',
                    type: 'bytes',
                  },
                ],
                internalType: 'struct Caveat[]',
                name: 'caveats',
                type: 'tuple[]',
              },
              {
                internalType: 'uint256',
                name: 'salt',
                type: 'uint256',
              },
            ],
            internalType: 'struct Delegation',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedDelegation',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedDelegation',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'address[]',
                name: 'signers',
                type: 'address[]',
              },
              {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256',
              },
            ],
            internalType: 'struct MultisigParams',
            name: 'message',
            type: 'tuple',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'signer',
            type: 'address',
          },
        ],
        internalType: 'struct SignedMultisigParams',
        name: '_input',
        type: 'tuple',
      },
    ],
    name: 'verifySignedMultisigParams',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x60a06040523480156200001157600080fd5b5060405162002c5838038062002c58833981016040819052620000349162000226565b6200006181604051806040016040528060018152602001603160f81b81525046306200006b60201b60201c565b60805250620002d4565b6000807f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f868051906020012086805190602001208686604051602001620000b79594939291906200027e565b60408051808303601f1901815291905280516020909101209695505050505050565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6200010482620000d9565b81018181106001600160401b0382111715620001245762000124620000e3565b6040525050565b60006200013760405190565b9050620001458282620000f9565b919050565b60006001600160401b03821115620001665762000166620000e3565b6200017182620000d9565b60200192915050565b60005b83811015620001975781810151838201526020016200017d565b83811115620001a7576000848401525b50505050565b6000620001c4620001be846200014a565b6200012b565b905082815260208101848484011115620001e157620001e1600080fd5b620001ee8482856200017a565b509392505050565b600082601f8301126200020c576200020c600080fd5b81516200021e848260208601620001ad565b949350505050565b6000602082840312156200023d576200023d600080fd5b81516001600160401b03811115620002585762000258600080fd5b6200021e84828501620001f6565b805b82525050565b6001600160a01b03811662000268565b60a081016200028e828862000266565b6200029d602083018762000266565b620002ac604083018662000266565b620002bb606083018562000266565b620002ca60808301846200026e565b9695505050505050565b608051612961620002f76000396000818161046f01526108ff01526129616000f3fe60806040526004361061013c5760003560e01c8063037dd6ff1461016157806307cae44d146101975780630deeb600146101b757806314239de7146101d75780632b163c2b14610204578063313399a8146102245780633c9f21a01461024457806342ec6d471461026457806359b989ca146102915780636eb8aaf4146102b157806383ebb771146102d157806389535803146102e657806393574eed146103065780639dfae31214610326578063a2c6cb0214610346578063a94c8db514610366578063bbd7581714610386578063bdcc1179146103a6578063c1c0e9c4146103c6578063d327c1eb146103db578063da452df1146103fb578063dbefc91f1461041d578063dbf122001461043d578063dfe86ac51461045d578063e315644d14610491578063f4fbfd2f146104b1578063fb293bd5146104d1575b6101446104f1565b600180546001600160a01b0319166001600160a01b038316179055005b34801561016d57600080fd5b5061018161017c366004611712565b61054d565b60405161018e9190611754565b60405180910390f35b3480156101a357600080fd5b506101816101b2366004611874565b6105c4565b3480156101c357600080fd5b506101816101d23660046118ae565b610634565b3480156101e357600080fd5b506101f76101f2366004611b34565b61067a565b60405161018e9190611b77565b34801561021057600080fd5b5061018161021f366004611b85565b6107bd565b34801561023057600080fd5b506101f761023f366004611bbf565b61080d565b34801561025057600080fd5b5061018161025f366004611c79565b61083c565b34801561027057600080fd5b5061028461027f366004611cfd565b610884565b60405161018e9190611d5f565b34801561029d57600080fd5b506101816102ac366004611d6d565b610899565b3480156102bd57600080fd5b506101f76102cc366004611da7565b6108ed565b3480156102dd57600080fd5b506101816108fd565b3480156102f257600080fd5b50610181610301366004611de1565b610921565b34801561031257600080fd5b50610181610321366004611da7565b61094a565b34801561033257600080fd5b50610181610341366004611e1e565b61097b565b34801561035257600080fd5b50610181610361366004611e3f565b6109bb565b34801561037257600080fd5b506001546101f7906001600160a01b031681565b34801561039257600080fd5b506101816103a1366004611e79565b6109eb565b3480156103b257600080fd5b506101816103c1366004611eb3565b610a3e565b3480156103d257600080fd5b506101f7610a7c565b3480156103e757600080fd5b506101816103f6366004611eed565b610a8b565b34801561040757600080fd5b5061041b610416366004611f84565b610ae7565b005b34801561042957600080fd5b506101f7610438366004611874565b610af5565b34801561044957600080fd5b50610181610458366004611fb7565b610b05565b34801561046957600080fd5b506101817f000000000000000000000000000000000000000000000000000000000000000081565b34801561049d57600080fd5b506101816104ac366004611ff1565b610b4c565b3480156104bd57600080fd5b506101816104cc366004611b34565b610bb4565b3480156104dd57600080fd5b506101816104ec36600461202b565b610be5565b600030330361054757600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915061054a9050565b50335b90565b6000606060005b83518110156105b5578161058085838151811061057357610573612065565b602002602001015161094a565b6040516020016105919291906120c9565b604051602081830303815290604052915080806105ad90612102565b915050610554565b50805160209091012092915050565b6000807ff562bb2887ad46fa4ed8270ec3eb4c4ddaaa8eac6df6a306f0539ed308b63f336105f58460000151610634565b60208086015180519082012060408088015190516106159594930161211c565b60408051601f1981840301815291905280516020909101209392505050565b6000807ffdaf74c87f80f0094315fc4e85684a5c59e57ac35e3b5b0dfa85df43b3439b5761066584600001516109bb565b60208086015160405161061594939201612151565b60008061068a8360000151610a3e565b905060006106966108fd565b826040516020016106a8929190612179565b60405160208183030381529060405280519060200120905083604001516001600160a01b031660006001600160a01b0316036106f75760006106ee828660200151610c4d565b95945050505050565b600084604001516001600160a01b0316631626ba7e8387602001516040518363ffffffff1660e01b815260040161072f9291906121d6565b602060405180830381865afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190612211565b9050630b135d3f60e11b6001600160e01b03198216146107ab5760405162461bcd60e51b81526004016107a29061225d565b60405180910390fd5b505050506040015190565b5050919050565b6000807f16ce3e7a160ccd1337156522b7b75f86515dce2f84625303c8cb53733473e20e6107ee84600001516109eb565b6107fb856020015161054d565b60405160200161061593929190612151565b600180546001600160a01b0319166001600160a01b038316179055600060606107b630826301406f4086610d16565b60008060008051602061290c8339815191528360000151805190602001208460200151805190602001208560400151866060015160405160200161061595949392919061226d565b6000610891848484610df6565b509392505050565b6000807fc868c829d0d249972f3cbb7c51600c4e74dd6ed52ba5192cddc7526c48257a9f836000015184602001516108d48660400151610be5565b86606001516040516020016106159594939291906122b9565b60008061068a8360000151610899565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0382166000908152602081815260408083208484529091529020545b92915050565b6000807fd1ffa191aacebaec8a0767b176d64c69a029e83c7bae7f3fdde5f0c5fdaf35036105f58460000151610899565b6000807fe8d3d963b33868fb116316bc3fd55e8f49123f30e4418f71e140d54b7cd3b2b98360000151846020015160405160200161061593929190612151565b6000816040516020016109ce9190612351565b604051602081830303815290604052805190602001209050919050565b6000807f8e96309e8d7caab0cd12f924b5671b439d8ee99659ea36357e8cc30e7fe322938360000151846020015185604001518660600151805190602001206040516020016106159594939291906122b9565b6000807f6d01ae502c3d43977868cf20f1077c1dc1970131f37d80ed21ecf591e958d810610a6f8460000151610b4c565b6107fb856020015161097b565b6000610a866104f1565b905090565b60008060008051602061290c833981519152868051906020012086805190602001208686604051602001610ac395949392919061226d565b60408051601f1981840301815291905280516020909101209150505b949350505050565b610af18282610f8e565b5050565b60008061068a8360000151610634565b6000807f80ad7e1b04ee6d994a125f4714ca0720908bd80ed16063ec8aee4b88e9253e2d836000015184602001518051906020012060405160200161061593929190612364565b6000606060005b83518110156105b55781610b7f858381518110610b7257610b72612065565b60200260200101516107bd565b604051602001610b909291906120c9565b60405160208183030381529060405291508080610bac90612102565b915050610b53565b6000807f220f51b2634e2a90b6fb21f89acf38590ea901923e6240ec90bcd0db8314524c6105f58460000151610a3e565b6000606060005b83518110156105b55781610c18858381518110610c0b57610c0b612065565b6020026020010151610b05565b604051602001610c299291906120c9565b60405160208183030381529060405291508080610c4590612102565b915050610bec565b6000806000808451604114610c685760009350505050610944565b50505060208201516040830151606084015160001a601b811015610c9457610c91601b8261237f565b90505b8060ff16601b14158015610cac57508060ff16601c14155b15610cbd5760009350505050610944565b60018682858560405160008152602001604052604051610ce094939291906123ae565b6020604051602081039080840390855afa158015610d02573d6000803e3d6000fd5b505050602060405103519350505050610944565b6000808483604051602001610d2c92919061240b565b60405160208183030381529060405290506060866001600160a01b03168583604051610d58919061242d565b60006040518083038160008787f1925050503d8060008114610d96576040519150601f19603f3d011682016040523d82523d6000602084013e610d9b565b606091505b50909350905082610dec57805115610dd4576000610db88261100c565b90508060405162461bcd60e51b81526004016107a29190612439565b60405162461bcd60e51b81526004016107a29061248b565b5050949350505050565b6000805b838110156108915736858583818110610e1557610e15612065565b9050602002810190610e27919061249b565b604080516060810190915290915060009080610e4384806124bf565b610e51906020810190611bbf565b6001600160a01b03168152602001610e6984806124bf565b604001358152602001610e7c84806124bf565b610e8a9060608101906124d9565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452509293508792509050610ed46020850185612537565b90501115610eff57610efb610eec6020850185612537565b610ef59161258b565b8361105b565b5090505b6000610f0b84806124bf565b610f1490612598565b80519091506001600160a01b03163014610f405760405162461bcd60e51b81526004016107a2906125ea565b610f5881600001518260600151836020015185610d16565b955085610f775760405162461bcd60e51b81526004016107a29061248b565b505050508080610f8690612102565b915050610dfa565b60208082015182516001600160a01b038516600090815280845260408082208483529094529290922054909190610fc69060016125fa565b8114610fe45760405162461bcd60e51b81526004016107a29061264d565b6001600160a01b03909316600090815260208181526040808320938352929052209190915550565b80516060906044811015611030575050604080516020810190915260008152919050565b60048301805160031983018252909361105290838101602001906024016126b5565b93525090919050565b60008080805b855181101561118b57600086828151811061107e5761107e612065565b602002602001015190506000611093826108ed565b90506110cb6040518060400160405280601481526020017364656c65676174696f6e5369676e65723a20257360601b81525082611195565b815160008490036110ff576020810151156110f85760405162461bcd60e51b81526004016107a29061272e565b8196508195505b856001600160a01b0316826001600160a01b0316146111305760405162461bcd60e51b81526004016107a290612780565b848160200151146111535760405162461bcd60e51b81526004016107a2906127da565b600061115e8461094a565b905061116f82604001518a836111da565b905195509350829150611183905081612102565b915050611061565b50505b9250929050565b610af182826040516024016111ab9291906127ea565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526112e0565b60005b83518161ffff1610156112da576000848261ffff168151811061120257611202612065565b60200260200101516000015190506000816001600160a01b0316635068de4c878561ffff168151811061123757611237612065565b60200260200101516020015187876040518463ffffffff1660e01b815260040161126393929190612849565b6020604051808303816000875af1158015611282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a69190612890565b9050806112c55760405162461bcd60e51b81526004016107a2906128e3565b505080806112d2906128f3565b9150506111dd565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61132a82611301565b81018181106001600160401b03821117156113475761134761130b565b6040525050565b600061135960405190565b90506113658282611321565b919050565b60006001600160401b038211156113835761138361130b565b5060209081020190565b60006001600160a01b038216610944565b6113a78161138d565b81146113b257600080fd5b50565b80356109448161139e565b806113a7565b8035610944816113c0565b60006001600160401b038211156113ea576113ea61130b565b6113f382611301565b60200192915050565b82818337506000910152565b600061141b611416846113d1565b61134e565b90508281526020810184848401111561143657611436600080fd5b6108918482856113fc565b600082601f83011261145557611455600080fd5b8135610adf848260208601611408565b60006040828403121561147a5761147a600080fd5b611484604061134e565b9050600061149284846113b5565b82525060208201356001600160401b038111156114b1576114b1600080fd5b6114bd84828501611441565b60208301525092915050565b60006114d76114168461136a565b838152905060208082019084028301858111156114f6576114f6600080fd5b835b818110156115365780356001600160401b0381111561151957611519600080fd5b8086016115268982611465565b85525050602092830192016114f8565b5050509392505050565b600082601f83011261155457611554600080fd5b8135610adf8482602086016114c9565b60006080828403121561157957611579600080fd5b611583608061134e565b9050600061159184846113b5565b82525060206115a2848483016113c6565b60208301525060408201356001600160401b038111156115c4576115c4600080fd5b6115d084828501611540565b60408301525060606115e4848285016113c6565b60608301525092915050565b60006060828403121561160557611605600080fd5b61160f606061134e565b905081356001600160401b0381111561162a5761162a600080fd5b61163684828501611564565b82525060208201356001600160401b0381111561165557611655600080fd5b61166184828501611441565b6020830152506040611675848285016113b5565b60408301525092915050565b600061168f6114168461136a565b838152905060208082019084028301858111156116ae576116ae600080fd5b835b818110156115365780356001600160401b038111156116d1576116d1600080fd5b8086016116de89826115f0565b85525050602092830192016116b0565b600082601f83011261170257611702600080fd5b8135610adf848260208601611681565b60006020828403121561172757611727600080fd5b81356001600160401b0381111561174057611740600080fd5b610adf848285016116ee565b805b82525050565b60208101610944828461174c565b60006117706114168461136a565b8381529050602080820190840283018581111561178f5761178f600080fd5b835b8181101561153657806117a488826113b5565b84525060209283019201611791565b600082601f8301126117c7576117c7600080fd5b8135610adf848260208601611762565b6000604082840312156117ec576117ec600080fd5b6117f6604061134e565b905081356001600160401b0381111561181157611811600080fd5b61181d848285016117b3565b82525060206114bd848483016113c6565b60006060828403121561184357611843600080fd5b61184d606061134e565b905081356001600160401b0381111561186857611868600080fd5b611636848285016117d7565b60006020828403121561188957611889600080fd5b81356001600160401b038111156118a2576118a2600080fd5b610adf8482850161182e565b6000602082840312156118c3576118c3600080fd5b81356001600160401b038111156118dc576118dc600080fd5b610adf848285016117d7565b6000608082840312156118fd576118fd600080fd5b611907608061134e565b9050600061191584846113b5565b8252506020611926848483016113c6565b602083015250604061193a848285016113c6565b60408301525060608201356001600160401b0381111561195c5761195c600080fd5b6115e484828501611441565b60006040828403121561197d5761197d600080fd5b611987604061134e565b905081356001600160401b038111156119a2576119a2600080fd5b6119ae848285016118e8565b82525060208201356001600160401b038111156119cd576119cd600080fd5b6114bd848285016116ee565b60006119e76114168461136a565b83815290506020808201908402830185811115611a0657611a06600080fd5b835b818110156115365780356001600160401b03811115611a2957611a29600080fd5b808601611a368982611968565b8552505060209283019201611a08565b600082601f830112611a5a57611a5a600080fd5b8135610adf8482602086016119d9565b600060408284031215611a7f57611a7f600080fd5b611a89604061134e565b9050600061181d84846113c6565b600060608284031215611aac57611aac600080fd5b611ab6604061134e565b905081356001600160401b03811115611ad157611ad1600080fd5b611add84828501611a46565b82525060206114bd84848301611a6a565b600060608284031215611b0357611b03600080fd5b611b0d606061134e565b905081356001600160401b03811115611b2857611b28600080fd5b61163684828501611a97565b600060208284031215611b4957611b49600080fd5b81356001600160401b03811115611b6257611b62600080fd5b610adf84828501611aee565b61174e8161138d565b602081016109448284611b6e565b600060208284031215611b9a57611b9a600080fd5b81356001600160401b03811115611bb357611bb3600080fd5b610adf84828501611968565b600060208284031215611bd457611bd4600080fd5b6000610adf84846113b5565b600060808284031215611bf557611bf5600080fd5b611bff608061134e565b905081356001600160401b03811115611c1a57611c1a600080fd5b611c2684828501611441565b82525060208201356001600160401b03811115611c4557611c45600080fd5b611c5184828501611441565b6020830152506040611c65848285016113c6565b60408301525060606115e4848285016113b5565b600060208284031215611c8e57611c8e600080fd5b81356001600160401b03811115611ca757611ca7600080fd5b610adf84828501611be0565b60008083601f840112611cc857611cc8600080fd5b5081356001600160401b03811115611ce257611ce2600080fd5b60208301915083602082028301111561118e5761118e600080fd5b600080600060408486031215611d1557611d15600080fd5b83356001600160401b03811115611d2e57611d2e600080fd5b611d3a86828701611cb3565b93509350506020611d4d868287016113b5565b9150509250925092565b80151561174e565b602081016109448284611d57565b600060208284031215611d8257611d82600080fd5b81356001600160401b03811115611d9b57611d9b600080fd5b610adf84828501611564565b600060208284031215611dbc57611dbc600080fd5b81356001600160401b03811115611dd557611dd5600080fd5b610adf848285016115f0565b60008060408385031215611df757611df7600080fd5b6000611e0385856113b5565b9250506020611e14858286016113c6565b9150509250929050565b600060408284031215611e3357611e33600080fd5b6000610adf8484611a6a565b600060208284031215611e5457611e54600080fd5b81356001600160401b03811115611e6d57611e6d600080fd5b610adf848285016117b3565b600060208284031215611e8e57611e8e600080fd5b81356001600160401b03811115611ea757611ea7600080fd5b610adf848285016118e8565b600060208284031215611ec857611ec8600080fd5b81356001600160401b03811115611ee157611ee1600080fd5b610adf84828501611a97565b60008060008060808587031215611f0657611f06600080fd5b84356001600160401b03811115611f1f57611f1f600080fd5b611f2b87828801611441565b94505060208501356001600160401b03811115611f4a57611f4a600080fd5b611f5687828801611441565b9350506040611f67878288016113c6565b9250506060611f78878288016113b5565b91505092959194509250565b60008060608385031215611f9a57611f9a600080fd5b6000611fa685856113b5565b9250506020611e1485828601611a6a565b600060208284031215611fcc57611fcc600080fd5b81356001600160401b03811115611fe557611fe5600080fd5b610adf84828501611465565b60006020828403121561200657612006600080fd5b81356001600160401b0381111561201f5761201f600080fd5b610adf84828501611a46565b60006020828403121561204057612040600080fd5b81356001600160401b0381111561205957612059600080fd5b610adf84828501611540565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561209657818101518382015260200161207e565b838111156112da5750506000910152565b60006120b1825190565b6120bf81856020860161207b565b9290920192915050565b60006120d582856120a7565b91506120e282848061174e565b5060200192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198203612115576121156120ec565b5060010190565b6080810161212a828761174c565b612137602083018661174c565b612144604083018561174c565b6106ee6060830184611b6e565b6060810161215f828661174c565b61216c602083018561174c565b610adf604083018461174c565b61190160f01b8152600201600061219182858061174e565b6020820191506120e282848061174e565b60006121ac825190565b8084526020840193506121c381856020860161207b565b6121cc81611301565b9093019392505050565b604081016121e4828561174c565b8181036020830152610adf81846121a2565b6001600160e01b031981166113a7565b8051610944816121f6565b60006020828403121561222657612226600080fd5b6000610adf8484612206565b6011815260006020820170494e56414c49445f5349474e415455524560781b815291505b5060200190565b6020808252810161094481612232565b60a0810161227b828861174c565b612288602083018761174c565b612295604083018661174c565b6122a2606083018561174c565b6122af6080830184611b6e565b9695505050505050565b60a081016122c7828861174c565b6122d46020830187611b6e565b6122e1604083018661174c565b6122ee606083018561174c565b6122af608083018461174c565b60006123078383611b6e565b505060200190565b6000612319825190565b602083018060005b8381101561234657815161233588826122fb565b975060208301925050600101612321565b509495945050505050565b600061235d828461230f565b9392505050565b60608101612372828661174c565b61216c6020830185611b6e565b600060ff8216915060ff831692508260ff038211156123a0576123a06120ec565b500190565b60ff811661174e565b608081016123bc828761174c565b6123c960208301866123a5565b6123d6604083018561174c565b6106ee606083018461174c565b60006109448260601b90565b6000610944826123e3565b61174e6124068261138d565b6123ef565b600061241782856120a7565b915061242382846123fa565b5060140192915050565b600061235d82846120a7565b6020808252810161235d81846121a2565b602181526000602082017f44656c6567617461626c65436f72653a3a657865637574696f6e2d6661696c658152601960fa1b602082015291505b5060400190565b602080825281016109448161244a565b60008235603e19368490030181126124b5576124b5600080fd5b9190910192915050565b60008235607e19368490030181126124b5576124b5600080fd5b6000808335601e19368590030181126124f4576124f4600080fd5b8084019250823591506001600160401b0382111561251457612514600080fd5b60208301925060018202360383131561252f5761252f600080fd5b509250929050565b6000808335601e193685900301811261255257612552600080fd5b8084019250823591506001600160401b0382111561257257612572600080fd5b6020928301928202360383131561252f5761252f600080fd5b600061235d368484611681565b600061094436836118e8565b602981526000602082017f44656c6567617461626c65436f72653a696e76616c69642d696e766f636174698152681bdb8b5d185c99d95d60ba1b60208201529150612484565b60208082528101610944816125a4565b600082198211156123a0576123a06120ec565b602381526000602082017f44656c6567617461626c65436f72653a6e6f6e6365322d6f75742d6f662d6f728152623232b960e91b60208201529150612484565b602080825281016109448161260d565b600061266b611416846113d1565b90508281526020810184848401111561268657612686600080fd5b61089184828561207b565b600082601f8301126126a5576126a5600080fd5b8151610adf84826020860161265d565b6000602082840312156126ca576126ca600080fd5b81516001600160401b038111156126e3576126e3600080fd5b610adf84828501612691565b602281526000602082017f43616e44656c65676174653a696e76616c69642d726f6f742d617574686f7269815261747960f01b60208201529150612484565b60208082528101610944816126ef565b602581526000602082017f43616e44656c65676174653a696e76616c69642d64656c65676174696f6e2d7381526434b3b732b960d91b60208201529150612484565b602080825281016109448161273e565b602d81526000602082017f43616e44656c65676174653a696e76616c69642d617574686f726974792d646581526c6c65676174696f6e2d6c696e6b60981b60208201529150612484565b6020808252810161094481612790565b604080825281016127fb81856121a2565b905061235d6020830184611b6e565b8051600090606084019061281e8582611b6e565b506020830151612831602086018261174c565b50604083015184820360408601526106ee82826121a2565b6060808252810161285a81866121a2565b9050818103602083015261286e818561280a565b9050610adf604083018461174c565b8015156113a7565b80516109448161287d565b6000602082840312156128a5576128a5600080fd5b6000610adf8484612885565b601b81526000602082017a10d85b91195b1959d85d194e98d85d99585d0b5c995a9958dd1959602a1b81529150612256565b60208082528101610944816128b1565b61ffff16600061fffe198201612115576121156120ec56fe8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400fa26469706673582212206ad5752b80cdf7b86d16cd0bf0e3653fb4e3fddb322b576b91a45db05163a0e364736f6c634300080f0033'

type MockDelegatableCoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: MockDelegatableCoreConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class MockDelegatableCore__factory extends ContractFactory {
  constructor(...args: MockDelegatableCoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'MockDelegatableCore'
  }

  deploy(
    contractName: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MockDelegatableCore> {
    return super.deploy(
      contractName,
      overrides || {},
    ) as Promise<MockDelegatableCore>
  }
  getDeployTransaction(
    contractName: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(contractName, overrides || {})
  }
  attach(address: string): MockDelegatableCore {
    return super.attach(address) as MockDelegatableCore
  }
  connect(signer: Signer): MockDelegatableCore__factory {
    return super.connect(signer) as MockDelegatableCore__factory
  }
  static readonly contractName: 'MockDelegatableCore'
  public readonly contractName: 'MockDelegatableCore'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): MockDelegatableCoreInterface {
    return new utils.Interface(_abi) as MockDelegatableCoreInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockDelegatableCore {
    return new Contract(address, _abi, signerOrProvider) as MockDelegatableCore
  }
}
