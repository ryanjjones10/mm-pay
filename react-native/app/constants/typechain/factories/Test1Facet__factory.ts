/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import '@ethersproject/shims'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { Test1Facet, Test1FacetInterface } from '../Test1Facet'

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'something',
        type: 'address',
      },
    ],
    name: 'TestEvent',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: '_interfaceID',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func1',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func10',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func11',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func12',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func13',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func14',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func15',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func16',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func17',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func18',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func19',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func2',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func20',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func3',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func4',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func5',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func6',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func7',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func8',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'test1Func9',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b506101cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106101075760003560e01c806301ffc9a71461010c5780630716c2ae14610136578063110460471461013657806319c841ab1461013657806319e3b5331461013657806324c1d5a714610136578063292c460d146101365780632cb83248146101365780634484b3b91461013657806350eb3f431461013657806351b68a4d1461013657806371a99d6f1461013657806377e9d0d61461013657806381b5207d1461013657806387952d22146101365780639abf97aa14610136578063b0e8fcc714610136578063cbb835f614610136578063cd0bae0914610136578063cf3bbe1814610136578063db32da1514610136575b600080fd5b61012061011a366004610162565b50600090565b60405161012d919061018b565b60405180910390f35b005b6001600160e01b03198116811461014e57600080fd5b50565b803561015c81610138565b92915050565b60006020828403121561017757610177600080fd5b60006101838484610151565b949350505050565b81151581526020810161015c56fea2646970667358221220beebef8e7d34c8c1de6455d7614ea1cd62d2c906614212bcedfc268951a87bf464736f6c63430008120033'

type Test1FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: Test1FacetConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Test1Facet__factory extends ContractFactory {
  constructor(...args: Test1FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'Test1Facet'
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<Test1Facet> {
    return super.deploy(overrides || {}) as Promise<Test1Facet>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): Test1Facet {
    return super.attach(address) as Test1Facet
  }
  connect(signer: Signer): Test1Facet__factory {
    return super.connect(signer) as Test1Facet__factory
  }
  static readonly contractName: 'Test1Facet'
  public readonly contractName: 'Test1Facet'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): Test1FacetInterface {
    return new utils.Interface(_abi) as Test1FacetInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Test1Facet {
    return new Contract(address, _abi, signerOrProvider) as Test1Facet
  }
}
